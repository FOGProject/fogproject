#!/bin/bash
#
# Start the network....
#
if [[ -n $has_usb_nic ]]; then
    echo "Please unplug your device and replug it into the usb port"
    echo -n "Please press enter key to connect [Enter]"
    read -p "$*"
    echo "Sleeping for 5 seconds to allow USB to sync back with system"
    sleep 5
fi
# Enable loopback interface
echo -e "auto lo\niface lo inet loopback\n\n" > /etc/network/interfaces
/sbin/ip addr add 127.0.0.1/8 dev lo
/sbin/ip link set lo up

sleep 10

# Generated a sorted list with primary interfaces first
read p_ifaces <<< $(/sbin/ip -0 -o addr show | awk -F'[: ]+' 'tolower($0) ~ /link[/]?ether/ && tolower($0) ~ /'$mac'/ {print $2}' | tr '\n' ' ')
read o_ifaces <<< $(/sbin/ip -0 -o addr show | awk -F'[: ]+' 'tolower($0) ~ /link[/]?ether/ && tolower($0) !~ /'$mac'/ {print $2}' | tr '\n' ' ')
ifaces="$p_ifaces $o_ifaces"
for iface in $ifaces; do
    echo "Starting $iface interface and waiting for the link to come up"
    echo -e "auto $iface\niface $iface inet dhcp\n\n" >> /etc/network/interfaces
    /sbin/ip link set $iface up

    # Wait till the interface is fully up and ready (spanning tree)
    timeout=0
    linkstate=0
    until [[ $linkstate -eq 1 || $timeout -ge 35 ]]; do
        let timeout+=1
        linkstate=$(/bin/cat /sys/class/net/$iface/carrier)
        [[ $linkstate -eq 0 ]] && sleep 1 || break
    done
    [[ $linkstate -eq 0 ]] && echo "No link detected on $iface for $timeout seconds, skipping it." && continue
    for retry in $(seq 3); do
        /sbin/udhcpc -i $iface --now
        ustat="$?"
        curl -Ifso /dev/null http://"${web}"/index.php --connect-timeout 5
        cstat="$?"
        # If the udhcp is okay AND we can curl our web
        # we know we have link so no need to continue on.
        # NOTE: the link to web is kind of important, just
        # exiting on dhcp request is not sufficient.
        [[ $ustat -eq 0 && $cstat -eq 0 ]] && exit 0
        sleep 1
    done
    echo "No DHCP response on interface $iface, skipping it."
done

# If we end up here something went wrong as we do exit the script as soon as we get an IP!
if [[ -z $ifaces ]]; then
    echo "No network interfaces found, your kernel is most probably missing the correct driver!"
else
    echo "Failed to get an IP via DHCP! Tried on interfaces(s): $ifaces"
fi
echo "Please check your network setup and try again!"
[[ -z $isdebug ]] && sleep 60 && reboot
echo "Press enter to continue"
read
exit 1
