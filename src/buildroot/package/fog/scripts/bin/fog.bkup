#!/bin/sh

# Make this dynamic from fog. PIGZ_COMP="-9";
RUN_CHKDSK="";
HOSTNAME_EARLY="0";

OS_ID_WIN7="5";
OS_ID_WIN8="6";

. /usr/share/fog/lib/funcs.sh

for arg in `cat /proc/cmdline`; do
    case "$arg" in
	initsh)
	    ash -i
	    ;;
	nombr)
	    nombr=1
	    ;;
	*)
	    ;;
    esac
done

clearScreen;

displayBanner;

setupDNS ${dns}

osname="";
mbrfile="";
defaultpart2start="105906176";
determineOS $osid;

macWinSafe=`echo $mac | sed 's/://g'`;

cores=$(grep "core id" /proc/cpuinfo | sort -u | wc -l)
sockets=$(grep "physical id" /proc/cpuinfo | sort -u | wc -l)
cores=$((cores * sockets))
if [ "$cores" == "0" ]; then
	cores=1
fi

if [ "$chkdsk" == "1" ]
then
	RUN_CHKDSK="-x";
fi

if [ -n "$hostname" ]
then
	HOSTNAME_EARLY="1";
fi

# DEBUG
fdisk -l &> /tmp/fdisk-before

echo "";
echo " * Checking Operating System...................$osname";
echo " * Checking CPU Cores..........................$cores";
echo "";
if [ "$mc" = "yes" ]; then
	echo " * Send method.................................UDPCAST";
else
	echo " * Send method.................................NFS";
fi

fog.statusreporter $mac $web &
#part2start="210764";  #Windows 7 Beta
if [ -n "$type" ]; then
	if [ "$type" = "down" ]; then
		
		imagePath="/images/${img}";

		blGo="0";
		nfsServerName="";
		while [ "$blGo" = "0" ]
		do
			if [ "$capone" != "1" ]; then
				if [ "$mc" != "yes" ]; then
					echo -n " * Checking In.................................";
					queueinfo=`wget -q -O - "http://${web}service/Pre_Stage1.php?mac=$mac&type=$type" 2>/dev/null`
					blPass=`echo $queueinfo | grep "##"`;
					echo "Done";
					waittime=0;
					while [ ! -n "$blPass" ]
					do
						echo -n "       * $queueinfo (";
						sec2String $waittime
						echo ")"
						queueinfo=`wget -q -O - "http://${web}service/Pre_Stage1.php?mac=$mac&type=$type" 2>/dev/null`
						blPass=`echo $queueinfo | grep "##"`;
						sleep 5;
						waittime=$(expr $waittime "+" 5);
					done

					directive="${queueinfo:3}";
					if [ ! "$directive" = "GO" ]
					then
						tmpStorageIp=`echo $queueinfo | cut -d'@' -f2 2>/dev/null`
						tmpStorage=`echo $queueinfo | cut -d'@' -f3 2>/dev/null`
						tmpName=`echo $queueinfo | cut -d'@' -f4 | base64 -d 2>/dev/null` ;
						if [ "$tmpStorage" != "" -a "$tmpStorageIp" != "" ]
						then
							storage=$tmpStorage;
							storageip=$tmpStorageIp;
							nfsServerName=$tmpName;
						else
							handleError "Error determining storage server!";
							exit 1;
						fi

						echo -n " * Using Storage Node..........................";
						echo $nfsServerName;
						sleep 1;
					fi

				else
					echo -n " * Checking In.................................";
					queueinfo=`wget -q -O - "http://${web}service/mc_checkin.php?mac=$mac&type=$type" 2>/dev/null`
					echo "Done";
					while [ "$queueinfo" != "##"  ]
					do
						echo -n "       * $queueinfo ";
						queueinfo=`wget -q -O - "http://${web}service/mc_checkin.php?mac=$mac&type=$type" 2>/dev/null`
						sleep 5;
					done

				fi
			fi

			echo -n " * Mounting File System........................";
			mkdir /images $debugstring 2>/dev/null;
			mount -o nolock,proto=tcp $storage /images 2>/tmp/mntfail
			mntRet="$?";
			if [ ! "$mntRet" = "0" ] && [ ! -f "/images/.mntcheck" ]
			then
				blame=`wget -q -O - "http://${web}service/blame.php?mac=$mac&type=$type" 2>/dev/null`
				if [ ! "$blame" = "##" ]
				then
					echo "Failed";
					echo "";
					echo -n " * ";
					cat /tmp/mntfail
					echo "";
					echo "Error during failure notification: $blame";

					while [ ! "$blame" = "##" ]
					do
						blame=`wget -q -O - "http://${web}service/blame.php?mac=$mac&type=$type" 2>/dev/null`
						if [ ! "$blame" = "##" ]
						then
							echo $blame;
						fi
						sleep 5;
					done
				else
					echo "Failed";
					echo "";
					echo -n " * ";
					cat /tmp/mntfail
					echo "";
				fi
				sleep 5;
			else
				echo "Done";
				blGo="1";
			fi
		done


		echo -n " * Checking Mounted File System................";
		if [ -f "/images/.mntcheck" ]; then
			echo "Done";
			echo "";
			echo " * Starting Image Push";
			
			if [ -n "$img" ] || [ "$mc" = "yes" ]; then

				if [ "$mc" != "yes" ]; then
					echo " * Using Image: $img";
					echo "";
				fi

				if [ "$imgType" = "n" ]; then

						if [ "$osid" != "1" ] && [ "$osid" != "2" ] && [ "$osid" != "5"	] && [ "$osid" != "6" ]; then
							handleError " * Invalid operating system id: $osname ($osid)!";
						fi

						echo -n " * Looking for Hard Disks......................";
						getHardDisk;
						echo "Done";
						echo " * Using Hard Disk: $hd";
						
						echo -n " * Checking write caching status on HDD........";
						wcache=$(hdparm -i $hd 2> /dev/null | sed '/WriteCache=/!d; s/^.*WriteCache=//; s/ .*$//')
						if [ "$wcache" == "enabled" ]; then
							echo "OK";
						elif [ "$wcache" == "disabled" ]; then
							hdparm -W 1 $hd 2&1 >/dev/null;
							echo "Enabled";
						else
							echo "Unknown status $wcache";
						fi

						cd /images;

						if [ -n "$hd" ]; then
							part="${hd}1";

							win7partcnt="0";
							win7rec="";
							export win7sys="";
							win7imgroot="$imagePath";	# only used for windows 7/8

							if [ $osid == "5" ] || [ $osid == "6" ]; then
								# With Windows 7/8, we need to know how many
								# partitions we have to determine the best
								# plan of attack.
								
								echo -n " * Windows Boot Partition Exists...............";

								if [ -f "$win7imgroot/rec.img.000" ]; then
									echo "Yes";
								
									win7partcnt="2";
									win7rec="${hd}1";
									export win7sys="${hd}2";
									export part=$win7sys;
								#TODO:review this
								# This needs to be reworked for general user
								#elif [ -f "$win7imgroot/gpt.bak" ]; then
								#	win7partcnt="3";
								#	win7rec="gpt";
								#	win7sys="${hd}3";
								#	part=$win7sys;
								else
									echo "No";
									
									# no recover part found!
									win7partcnt="1";
									export win7sys="${hd}1";
								fi

								if [ -f "$win7imgroot/sys.img.000" ]; then
									echo -n " * Preparing hard Disks (Stage 1)..............";
										
									if [ "$nombr" == "1" ]; then
										echo "Skipped";
									else
										dd if=/dev/zero of=$hd bs=512 count=20 &>/dev/null
										dd if=$mbrfile of=$hd bs=512 count=1 &>/dev/null
										echo "Done";
									fi

									# We need the size of the disk
									# because if the size if > 2tb 
									# creating the partion with parted will fail
									diskSize=`parted -s $hd u kB print | grep "Disk" | grep -v "Flags"| sed 's/Disk \/dev\/[a-zA-Z0-9]*: //' | sed 's/kB//'`

									layPartSize="99%"
									if [ $diskSize -gt 2199023256 ]; then
										layPartSize="2tB"
									fi

									if [ "$win7partcnt" == "1" ]; then
										echo -n " * Preparing hard Disks (Stage 2)..............";
										parted -s $hd u kB rm 1 &>/dev/null;
										echo "Done";
										
										echo -n " * Preparing hard Disks (Stage 3)..............";
										parted -s $hd -a opt u kB mkpart primary ntfs 2048s ${layPartSize} &>/dev/null


#										parted -s $hd u kB mkpart primary ntfs 63s &>/dev/null <<EOFPARTED
#$layPartSize
#EOFPARTED
										parted -s $hd u kB set 1 boot on &>/dev/null
										echo "Done";

									elif [ "$win7partcnt" == "2" ]; then
										echo -n " * Preparing hard Disks (Stage 2)..............";
										parted -s $hd u kB rm 2 &>/dev/null;
										parted -s $hd u kB rm 2 &>/dev/null;
										echo "Done";

										echo -n " * Preparing hard Disks (Stage 3)..............";
										parted -s $hd -a opt u kB mkpart primary ntfs 2048s 105906175B &>/dev/null
										parted -s $hd u kB set 1 boot on &>/dev/null
										parted -s $hd -a opt u kB mkpart primary ntfs ${defaultpart2start}B ${layPartSize} &>/dev/null
#										parted -s $hd u kB mkpart primary ntfs 105906kB &>/dev/null <<EOFPARTED
#$layPartSize
#EOFPARTED
										echo "Done";
									#TODO:review this
									# This section needs to be looked at and reworked for general consumption
									#elif [ "$win7partcnt" == "3" ]; then
										#echo -n " * Preparing hard Disks (Stage 2)..............";
										# --zap-all            -Wipe GPT & MBR
										# --mbrtogpt           -Used to init gpt and enable tot backup to work
										# --load-backup        -Pull int disk's original gpt
										# --move-second-header -Moves the backup GPT header to the end of the new drive
										# --extend             -Resizes the last partition to the max size
										#sgdisk --zap-all $hd 2>&1 > /dev/null
										#sleep 2
										#runPartprobe
										#sgdisk --mbrtogpt --load-backup=$win7imgroot/gpt.bak --move-second-header $hd &>/dev/null
										#echo "Done";
										#echo -n " * Preparing hard Disks (Stage 3)..............";
										#sleep 3
										#runPartprobe
										#sgdisk -x 3:$(sgdisk -E $hd) $hd &>/dev/null
										#echo "Done";
									fi
								else
									handleError "Unable to locate image file for Windows 7/8! (sys.img.000)";
								fi
							else
								# Everything else
								echo -n " * Preparing hard Disks (Stage 1)..............";
								if [ "$nombr" == "1" ]; then
									echo "Skipped";
								else
									dd if=/dev/zero of=$hd bs=512 count=20 &>/dev/null
									dd if=$mbrfile of=$hd bs=512 count=1 &>/dev/null
									echo "Done";
								fi

								echo -n " * Preparing hard Disks (Stage 2)..............";
									fdisk $hd &>/dev/null <<EOF
d
w
EOF
								echo "Done";

								echo -n " * Preparing hard Disks (Stage 3)..............";
								# Blackout - 1:30 PM 13/05/2012
								if [ "$osid" == "1" ]; then
									parted -s $hd u kB mkpart primary ntfs 63s 99% &>/dev/null;
									parted -s $hd u kB set 1 boot on &>/dev/null;
								else
									fdisk $hd &>/dev/null <<EOFP3
n
p
1
+105906K

t
7
a
1
w
EOFP3
								fi
								echo "Done";
							fi


						if [ "$osid" = "2" ] ; then  # || [ "$osid" == "5" ]
							correctVistaMBR $hd;
						fi

						echo -n " * Checking hard disks.........................";
						runPartprobe;
						echo "Done";
						if [ "$mc" = "yes" ]; then
							if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
								if [ "$win7partcnt" == "1" ]; then
									udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $win7sys -N 2>/tmp/status.fog
								elif [ "$win7partcnt" == "2" ]; then
									udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $win7rec -N 2>/tmp/status.fog
									udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $win7sys -N 2>/tmp/status.fog
								#TODO:review this
								#elif [ "$win7partcnt" == "3" ]; then
								#	udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null |  partimage -f3 -b restore ${hd}1 stdin
								#	udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null |  partimage -f3 -b restore ${hd}2 stdin
								#	udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partimage -f3 -b restore $win7sys stdin
								fi

							else
								udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O ${part} -N 2>/tmp/status.fog
							fi
						else
							if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
								if [ "$win7partcnt" == "1" ]; then
									if [ "$capone" == "1" ]; then
										export FOGSTATS="0";
									else
										export FOGSTATS="1";
									fi
									pigz -d -c < $imagePath/sys.img.000 | partclone.restore -O $win7sys -N 2>/tmp/status.fog
sleep 20
								elif [ "$win7partcnt" == "2" ]; then
									pigz -d -c < $imagePath/rec.img.000 | partclone.restore -O $win7rec -N 2>/tmp/status.fog
									if [ "$capone" == "1" ]; then
										export FOGSTATS="0";
									else
										export FOGSTATS="1";
									fi
									pigz -d -c < $imagePath/sys.img.000 | partclone.restore -O $win7sys -N 2>/tmp/status.fog
								#TODO:review this
								#elif [ "$win7partcnt" == "3" ]; then
								#	partimage restore ${hd}1 $imagePath/rec1.img.000 -f3 -b 2>/dev/null
								#	partimage restore ${hd}2 $imagePath/rec2.img.000 -f3 -b 2>/dev/null

								#	if [ "$capone" == "1" ]; then
								#		export FOGSTATS="0";
								#	else
								#		export FOGSTATS="1";
								#	fi
								#	fog.statusreporter $mac $web &
								#	partimage restore $win7sys $imagePath/sys.img.000 -f3 -b 
								fi
							else
								if [ "$capone" == "1" ]; then
									export FOGSTATS="0";
								else
									export FOGSTATS="1";
								fi
								pigz -d -c < $imagePath | partclone.restore -O $part -N 2>/tmp/status.fog
							fi
						fi
						#sleep 1;

						clearScreen;
						echo -n " * Performing Clean up  (Stage 1)..............";
						ntfsresize $part $RUN_CHKDSK -f -b -P &>/dev/null << EOFNTFS
Y
EOFNTFS
						echo "Done";
					else
						handleError "HD is null; no hard disk was found.";
					fi
				elif [ "$imgType" = "mps" ]; then
					# Restore multipartion for single drive
					echo -n " * Looking for Hard Disks......................";
					#disk=`fogpartinfo --list-devices 2>/dev/null | cut -d' ' -f 1`
					getHardDisk;
					echo "Done";
					echo " * Using Hard Disk: $hd";

					if [ -n "$hd" ]
					then
						# check image
						if [ -d "$imagePath" ]
						then
							tmpMBR="${imagePath}/d1.mbr";
							if [ -f "$tmpMBR" ]
							then
								echo -n " * Restoring MBR...............................";
								dd if=$tmpMBR of=$hd &>/dev/null
								if [ "$osid" == "50" ]
								then
									fdisk $hd  &>/dev/null << EOFLINUXFIX
w
EOFLINUXFIX
								fi
								echo "Done";

								echo -n " * Checking hard disks.........................";
								runPartprobe;
								echo "Done";
								parts=`fogpartinfo --list-parts $hd 2>/dev/null`

								diskLength=`expr length $hd`;
								for part in $parts
								do
									partNum=${part:$diskLength};
									echo " * Processing Partition: $part (${partNum})";
									sleep 1;
									imgpart="${imagePath}/d1p${partNum}.img";
									if [ "$osid" == "50" ]; then
										echo " * Preparing linux filesystem...";
										parted -s $hd -a opt &>/dev/null << EOFPTD
mkfs
yes
$partNum
fat32
q
EOFPTD
										runPartprobe;
										sleep 10;
									fi
									if [ -f "$imgpart" ]; then
										if [ "$mc" = "yes" ]; then
											if [ "$partNum" == "2" ] && [ "$osid" == "6" ]; then
												udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
											elif [ "$partNum" == "3" ] && [ "$osid" == "6" ]; then
												udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
											else
												udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
											fi
										else
											export FOGSTATS="1";
											if [ "$partNum" == "2" ] && [ "$osid" == "6" ]; then
												pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
											elif [ "$partNum" == "3" ] && [ "$osid" == "6" ]; then
												pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
											else
												pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
											fi
										fi
									else
										echo " * Partition File missing: $imgpart";
										sleep 9;
									fi
									sleep 1;
									clearScreen;
									echo " * Image Restored";
								done
								if [ "$osid" == "50" ]
								then
									echo " * Restore Linux swap paritions:";
									swaps=`LANG=C fdisk -l | grep swap | cut -d' ' -f1 2>/dev/null`;
IFS='
';
									for x in $swaps
									do
										echo  "       * Restoring partition: $x";
										mkswap $x &>/dev/null
									done

								fi
								echo "";

								echo " * Task complete!";
								echo "";

							else
								handleError "Image Store Corrupt: Unable to locate MBR.";
							fi
						else
							handleError "Unable to locate image store.";
						fi
					else
						handleError "Fatal Error: Disk device not found!";
					fi
				elif [ "$imgType" = "mpa" ]; then
					# Restore multipartion for all drives
					echo -n " * Looking for Hard Disks......................";
					disks=`fogpartinfo --list-devices 2>/dev/null`
					echo "Done";

					for disk in $disks
					do
						if [ -n "$disk" ]
						then
							echo " * Using Hard Disk: $disk";
						fi
					done
					sleep 1;

					echo "";

					# check image
					if [ -d "$imagePath" ]
					then
						intDisk=1;
						for disk in $disks
						do
							if [ -n "$disk" ]
							then

								tmpMBR="${imagePath}/d${intDisk}.mbr";

								if [ -f "$tmpMBR" ]
								then
									echo -n " * Restoring MBR...............................";
									dd if=$tmpMBR of=$disk &>/dev/null
									echo "Done";

									echo -n " * Checking hard disks.........................";
									runPartprobe;
									echo "Done";

									parts=`fogpartinfo --list-parts $disk 2>/dev/null`
									diskLength=`expr length $disk`;
									for part in $parts
									do
										partNum=${part:$diskLength};
										echo " * Processing Partition: $part (${partNum})";
										sleep 1;
										imgpart="${imagePath}/d${intDisk}p${partNum}.img";
										if [ -f "$imgpart" ]; then
											if [ "$mc" = "yes" ]; then
												if [ "$partNum" == "2" ] && [ "$osid" == "6" ]; then
													udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
												elif [ "$partNum" == "3" ] && [ "$osid" == "6" ]; then
													udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
												else
													udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | partclone.restore -O $part -N 2>/tmp/status.fog
												fi
											else
												export FOGSTATS="1";
												if [ "$partNum" == "2" ] && [ "$osid" == "6" ]; then
													pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
												elif [ "$partNum" == "3" ] && [ "$osid" == "6" ]; then
													pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
												else
													pigz -d -c < $imgpart | partclone.restore -O $part -N 2>/tmp/status.fog
												fi
											fi
										else
											echo " * Partition File missing: $imgpart";
											sleep 9;
										fi
										sleep 1;
										clearScreen;
										echo " * Image Restored";
									done
								else
									handleError "Image Store Corrupt: Unable to locate MBR.";
								fi
							else
								handleError "Fatal Error: Disk device not found!";
							fi
							intDisk=`expr $intDisk + 1`;
						done

						if [ "$osid" == "50" ]
						then
							echo " * Restore Linux swap paritions:";
							swaps=`LANG=C fdisk -l | grep swap | cut -d' ' -f1 2>/dev/null`;
IFS='
';
							for x in $swaps
							do
								echo  "       * Restoring partition: $x";
								mkswap $x &>/dev/null
							done

						fi
						echo "";
						echo " * Task complete!";
						echo "";
					else
						handleError "Unable to locate image store.";
					fi
				else
					# dd image type
					echo -n " * Looking for Hard Disks......................";
					getHardDisk
					echo "Done";
					echo " * Using Hard Disk: $hd";
					if [ -n "$hd" ]; then
						echo "";
						echo " * Now FOG will attempt to restore the image using DD.";
						echo "";
						echo " * Starting transfer, this may take a very long time...";
						echo "";
						if [ "$mc" = "yes" ]; then
							udp-receiver --nokbd --portbase ${port} --mcast-rdv-address ${storageip} 2>/dev/null | gunzip -f -c 2>/dev/null | dd of=${hd}
						else
							cat $imagePath | gunzip  | dd of=${hd}
						fi
					else
						handleError "Fatal Error: Disk device not found!";
					fi
				fi

				if [ "$capone" != "1" ]; then

					changeHostname

					echo "";
					echo " * Updating Computer Database Status";
					echo "";

					queueinfo="";
					cd /tmp
					wget -q -O /tmp/co.txt "http://${web}service/Post_Stage3.php?mac=$mac&type=$type" &>/dev/null
					queueinfo=`cat co.txt`;


					while [ "$queueinfo" != "##" ]
					do
						echo "       * $queueinfo";
						rm co.txt
						wget -q -O co.txt "http://${web}service/Post_Stage3.php?mac=$mac&type=$type" &>/dev/null
						queueinfo=`cat co.txt`;
						sleep 5;
					done

					echo "";
					echo " * Database updated!";
					echo "";
				fi

				echo "";
				echo " * Task complete, computer will now restart";
				echo "";
				sleep 1;

			else
				handleError "Fatal Error: Invalid image name;";
			fi
		else
			handleError "Fatal Error: Failed to mount NFS Volume.\n   * If you believe the filesystem is mounted,\n     make sure you have a file called .mntcheck\n     in the directory you are mounting on the server";
		fi
	elif [ "$type" = "up" ]; then
		echo " * Preparing to send image file to server.";
		
		imagePath="/images/${macWinSafe}";

		percent=$pct;
		if [ $percent -ge 5 ]
		then
			if [ ! $percent -lt 100 ]
			then
				percent=5;
			fi
		else
			percent=5;
		fi

		if [ $percent -lt 10 ]
		then
			percent="0${percent}";
		fi
		
		echo -n " * Checking In.................................";
		queueinfo=`wget -q -O - "http://${web}service/Pre_Stage1.php?mac=$mac&type=$type" 2>/dev/null`
		echo "Done";

		echo -n " * Mounting File System........................";
		mkdir /images 2>/dev/null;

		mount -o nolock,proto=tcp $storage /images
		echo "Done";
		echo -n " * Checking Mounted File System................";
		if [ -f "/images/.mntcheck" ]; then
			echo "Done";
			echo "";
			if [ -n "$img" ]; then
				echo " * Using Image: $img";
				echo "";
				
				# Make directory structure for image
				echo -n " * Preparing backup location...................";
				if [ ! -d "$imagePath" ]
				then
					mkdir -p "$imagePath" 2>/dev/null;
				fi
				chmod -R 777 $imagePath
				rm -Rf "$imagePath/*"
				echo "Done";
				
				# NTFS Resize partition method
				if [ "$imgType" = "n" ]; then

					if [ "$osid" != "1" ] && [ "$osid" != "2" ] && [ "$osid" != "5"	] && [ "$osid" != "6" ]; then		# Added OS ID 5 for Windows 7
						handleError " * Invalid operating system id: $osname ($osid)!";
					fi

					echo -n " * Looking for Hard Disks......................";
					getHardDisk
					echo "Done";
					echo " * Using Hard Disk: $hd";
					
					
					
					if [ -n "$hd" ]; then
						part="${hd}1";

						win7partcnt="0";
						win7rec="";
						export win7sys="";
						if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
							# With Windows 7, we need to know how many
							# partitions we have to determine the best
							# plan of attack.

							parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
							for prt in $parts
							do
								win7partcnt=`expr ${win7partcnt} + 1`;
							done

							if [ "$win7partcnt" = "0" ]; then
								handleError "No partitions found.";
							elif [ "$win7partcnt" = "1" ]; then
								export win7sys="$parts";
								export part="${hd}1";
							elif [ "$win7partcnt" = "2" ]; then
								tmpCnt="0";
								for prt in $parts
								do
									if [ "$tmpCnt" = "0" ]; then
										win7rec="$prt";
									elif [ "$tmpCnt" = "1" ]; then
										export win7sys="$prt";
										export part="$prt";
									fi
									tmpCnt=`expr $tmpCnt + 1`;
								done
							#TODO:review this
							#elif [ "$win7partcnt" = "3" ] && [ $(parted -m $hd print | grep $hd | cut -d: -f6) = "gpt" ]; then
							#	win7rec="gpt"
							#	win7sys=${hd}3
							#	part=${hd}3
							else
								# greater than 3 parts
								handleError "More than 2 partitions found, not valid for this image type.";
							fi

							clearMountedDevices
						fi

						if [ "$ignorepg" = "1" ]; then
							#if [ "$osid" != "5" ]; then
								echo -n " * Mounting device.............................";
								mkdir /ntfs &>/dev/null
								ntfs-3g -o force,rw $part /ntfs
								if [ "$?" = "0" ]; then
									echo "Done";
									echo -n " * Removing page file..........................";
									rm -f "/ntfs/pagefile.sys";
									echo "Done";

									echo -n " * Removing hibernate file.....................";
									rm -f "/ntfs/hiberfil.sys"
									echo "Done";

									umount /ntfs;
								else
									echo "Failed";
								fi
							#fi
						fi


						echo -n " * Backing up MBR..............................";

						# This needs to be looked at
						#TODO:review this
						if [ "$win7rec" == "gpt" ]; then
							sgdisk --backup=/gpt.bak $hd 2>&1 >/dev/null
						else
							dd if=$hd of=/mbr.backup count=1 bs=512 &>/dev/null
						fi
						echo "Done";
						diskSize=`parted -s $hd u kB print | grep "Disk" | grep -v "Flags"| sed 's/Disk \/dev\/[a-zA-Z0-9]*: //' | sed 's/kB//'`
						
						# Windows XP: Start sector check
						if [ "$osid" == "1" ]; then
							partitionStart=`fdisk -lu | grep $part | awk '{print $3}'`;
							if [ "$partitionStart" == "" ]; then
								partitionStart="63"; # We assume XP start sector will 63, modern start sector is 2048
							fi
							if [ "$partitionStart" != "63" ]; then
								handleError "FOG requires your Windows XP's partition start sector to be 63 but is ${partitionStart}";
							fi
						fi
						
						# NTFSResize
						ntfsresizetest="ntfsresize $RUN_CHKDSK -f -i -P ${part}"
						size=`${ntfsresizetest} | grep "You might resize" | cut -d" " -f5`
						if [ -n "$size" ]; then
							sizentfsresize=`expr $size / 1000`
							sizentfsresize=`expr $sizentfsresize + 300000`
							sizentfsresize=`expr $sizentfsresize \* 1${percent} / 100`

							sizefd=`expr $sizentfsresize \* 103 / 100`
							echo "";
							echo " * Possible partition size: $sizentfsresize k";
							echo -n " * Running resize test.........................";
							tmpSuc=`ntfsresize $RUN_CHKDSK -f -n -s ${sizentfsresize}k $part << EOFNTFS
Y
EOFNTFS`
							success=`echo $tmpSuc | grep "ended successfully"`;
							echo "Done";

							if [ ! -n "$success" ]
							then
								success=`echo $tmpSuc | grep "already OK"`;
							fi

							if [ -n "$success" ]; then
								echo " * Resize test was successful";
								echo -n " * Resizing partition..........................";
								ntfsresize $RUN_CHKDSK -f -s ${sizentfsresize}k $part &>/dev/null << FORCEY
y
FORCEY
								echo "Done";

								
								if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
									if [ "$win7partcnt" == "1" ]; then
										win7part1start=`parted -s $hd u kB print | sed -e '/^.1/!d' -e 's/^ [0-9]*[ ]*//' -e 's/kB  .*//'`;
										if [ "$win7part1start" == "" ]; then
											handleError "Unable to determine disk start location.";
										fi

										adjustedfdsize=`expr $sizefd + $win7part1start`;
										
										parted -s $hd u kB rm 1 &>/dev/null;
										parted -s $hd -a opt u kB mkpart primary ntfs 2048s ${adjustedfdsize}kB &>/dev/null;

									elif [ "$win7partcnt" == "2" ]; then
										win7part2start=`parted -s $hd u kB print | sed -e '/^.2/!d' -e 's/^ [0-9]*[ ]*//' -e 's/kB  .*//'`;
										if [ "$win7part2start" == "" ]; then
											handleError "Unable to determine disk start location.";
										fi

										adjustedfdsize=`expr $sizefd + $win7part2start`;
										parted -s $hd -a opt u kB mkpart primary ntfs ${defaultpart2start}B ${adjustedfdsize}kB  &>/dev/null;
									else
										handleError "Invalid partition count.";
									fi
								else
									# Any other OS other than windows 7/8
									
									# Blackout - 1:30 PM 13/05/2012
									parted -s $hd rm 1 &>/dev/null;
									parted -s $hd u kB mkpart primary ntfs ${partitionStart}s 99% &>/dev/null
									parted -s $hd u kB set 1 boot on &>/dev/null
								fi
								
								if [ "$osid" = "2" ] ; then #|| [ "$osid" = "5" ]
									correctVistaMBR $hd
								fi

								echo -n " * Checking hard disks.........................";
								runPartprobe;
								echo "Done";
								echo -n " * Cleaning hard disks.........................";
								ntfsfix -b -d ${part} |grep -i "success" 2>/dev/null;
								echo "Done";
								
								echo -n " * Starting FOG Status Reporter................";
								export FOGSTATS="1";
								echo "Done";
								
								mkfifo /tmp/pigz1
								mkfifo /tmp/pigz2
								mkfifo /tmp/pigz3
								
								echo "";
								echo " * Now FOG will attempt to upload the image using Partclone.";
								echo "";
								sleep 2;
								fstype=`blkid -po udev $win7sys | grep FS_TYPE | awk -F'=' '{print $2}'`;
								if [ "$fstype" == "ext4" ] || [ "$fstype" == "ext3" ] || [ "$fstype" == "ext2" ]; then
									fstype="extfs -c"
								elif [ "$fstype" == "ntfs" ]; then
									fstype="ntfs -c"
								elif [ "$fstype" == "vfat" ]; then
									fstype="fat -c"
								else
									fstype="dd"
								fi
								if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
									if [ "$win7partcnt" == "1" ]; then
										echo " * Processing a Windows 7 System with 1 partition.";
										#sleep 2;
									    if [ "$capone" == "1" ]; then
									  	    export FOGSTATS="0";
									    else
										    export FOGSTATS="1";
									    fi
										pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/sys.img.000 &
										partclone.${fstype} -s $win7sys -O /tmp/pigz1 -N 2>/tmp/status.fog
									elif [ "$win7partcnt" == "2" ]; then
									    if [ "$capone" == "1" ]; then
									  	    export FOGSTATS="0";
									    else
										    export FOGSTATS="1";
									    fi
										echo " * Processing a Windows 7 System with 2 partitions.";
										#sleep 2;
										
										pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/rec.img.000 &
										partclone.${fstype} -s $win7rec -O /tmp/pigz1 -N 2>/tmp/status.fog
										
                                        pigz -p $cores $PIGZ_COMP < /tmp/pigz2 > $imagePath/sys.img.000 &
										partclone.${fstype} -s $win7sys -O /tmp/pigz2 -N 2>/tmp/status.fog
									fi
									#sleep 3
									
								else
									    if [ "$capone" == "1" ]; then
									  	    export FOGSTATS="0";
									    else
										    export FOGSTATS="1";
									    fi
									pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/${macWinSafe}.000 &
									partclone.${fstype} -s $part -O /tmp/pigz1 -N 2>/tmp/status.fog
								fi
								
								chmod -R 777 $imagePath
								
								rm /tmp/pigz1
								rm /tmp/pigz2
								rm /tmp/pigz3

								clearScreen;

								echo -n " * Restoring MBR...............................";

								#TODO:review this
								if [ "$win7partcnt" == "3" ] && [ "$win7rec" == "gpt" ]; then
									sgdisk -g -l /gpt.bak $hd 2>&1 >/dev/null
								else
									dd if=/mbr.backup of=$hd &>/dev/null
									fdisk $hd &>/dev/null << EOFRESTOREPART
w
EOFRESTOREPART
								fi
								echo "Done";
								if [ "$osid" = "2" ] ; then #  || [ "$osid" = "5" ]
									correctVistaMBR $hd;
								fi

								if [ "$osid" = "5" ] || [ "$osid" == "6" ]; then
									echo -n " * Resizing ntfs...............................";
									ntfsresize $win7sys $RUN_CHKDSK -f -b -P &>/dev/null << EOFNTFSRESTORE1
Y
EOFNTFSRESTORE1
									echo "Done";
								else
									echo -n " * Resizing ntfs...............................";
									ntfsresize $part $RUN_CHKDSK -f -b -P &>/dev/null << EOFNTFSRESTORE
Y
EOFNTFSRESTORE
									echo "Done";
									echo -n " * Cleaning disks..............................";
									ntfsfix -b -d ${part} |grep -i "success" 2>/dev/null;
									echo "Done";
								fi
							else
								handleError "Resize test failed!\n $tmpSuc";
							fi
						else
							tmpoutput=`$ntfsresizetest;`;
							handleError " Fatal Error, Unable to determine possible ntfs size\n    * To better help you debug we will run the ntfs resize\n      but this time with full output, please wait!\n\n$tmpoutput";
						fi
					else
						handleError "Fatal Error: Unable to locate hard disk";
					fi
				elif [ "$imgType" = "mps" ]; then
					# Multi-part single disk image
					echo -n " * Looking for Hard Disks......................";
					disk=`fogpartinfo --list-devices 2>/dev/null | cut -d' ' -f 1`
					echo "Done";
					echo " * Using Hard Disk: $disk";

					if [ -n "$disk" ]
					then
						if [ -d "$imagePath" ]
						then
							if [ "$osid" == "50" ]
							then
								echo -n " * Saving MBR and GRUB.........................";
								dd if=$disk of=${imagePath}/d1.mbr count=63 bs=512 &>/dev/null
								echo "Done";
							else
								echo -n " * Saving MBR..................................";
								dd if=$disk of=${imagePath}/d1.mbr count=1 bs=512 &>/dev/null
								echo "Done";
							fi
							parts=`fogpartinfo --list-parts $disk 2>/dev/null`
							diskLength=`expr length $disk`;
							for part in $parts
							do
								mkfifo /tmp/pigz1
								partNum=${part:$diskLength};
								echo " * Processing Partition: $part (${partNum})";
									    if [ "$capone" == "1" ]; then
									  	    export FOGSTATS="0";
									    else
										    export FOGSTATS="1";
									    fi
								sleep 1;
								fstype=`blkid -po udev $part | grep FS_TYPE | awk -F'=' '{print $2}'`;
								if [ "$fstype" == "ext4" ] || [ "$fstype" == "ext3" ] || [ "$fstype" == "ext2" ]; then
									fstype="extfs -c"
								elif [ "$fstype" == "ntfs" ]; then
									fstype="ntfs -c"
								elif [ "$fstype" == "vfat" ]; then
									fstype="fat -c"
								else
									fstype="dd"
								fi
								imgpart="${imagePath}/d1p${partNum}.img";
								pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imgpart &
								partclone.${fstype} -s $part -O /tmp/pigz1 -N 2>/tmp/status.fog
								mv ${imgpart}.000 ${imgpart} 2>/dev/null

								sleep 1;
								clearScreen;
								echo " * Image uploaded";
								sleep 1
								rm /tmp/pigz1
							done
							echo " * Task complete!";
							echo "";
						else
							handleError "Unable to create ${imagePath}";
						fi
					else
						handleError "Fatal Error: Disk device not found!";
					fi
				elif [ "$imgType" = "mpa" ]; then
					# Multi-part all disk image
					echo -n " * Looking for Hard Disks......................";
					disks=`fogpartinfo --list-devices 2>/dev/null`
					echo "Done";

					for disk in $disks
					do
						if [ -n "$disk" ]
						then
							echo " * Using Hard Disk: $disk";
						fi
					done
					sleep 1;

					echo "";

					intDisk=1;
					for disk in $disks
					do
						if [ -n "$disk" ]
						then
							echo " * Processing Hard Disk: $disk";
							sleep 10;
							if [ -d "$imagePath" ]
							then
								if [ "$osid" == "50" ]
								then
									if [ "${intDisk}" = "1" ]
									then
										echo -n " * Saving MBR and GRUB.........................";
										dd if=$disk of=${imagePath}/d${intDisk}.mbr count=63 bs=512 &>/dev/null
										echo "Done";
									else
										echo -n " * Saving MBR..................................";
										dd if=$disk of=${imagePath}/d${intDisk}.mbr count=1 bs=512 &>/dev/null
										echo "Done";
									fi
								else
									echo -n " * Saving MBR..................................";
									dd if=$disk of=${imagePath}/d${intDisk}.mbr count=1 bs=512 &>/dev/null
									echo "Done";
								fi

								parts=`fogpartinfo --list-parts $disk 2>/dev/null`
								diskLength=`expr length $disk`;
								for part in $parts
								do
									mkfifo /tmp/pigz1
									partNum=${part:$diskLength};
									echo " * Processing Partition: $part (${partNum})";
									    if [ "$capone" == "1" ]; then
									  	    export FOGSTATS="0";
									    else
										    export FOGSTATS="1";
									    fi
									sleep 1;
									fstype=`blkid -po udev $part | grep FS_TYPE | awk -F'=' '{print $2}'`;
									if [ "$fstype" == "ext4" ] || [ "$fstype" == "ext3" ] || [ "$fstype" == "ext2" ]; then
										fstype="extfs -c"
									elif [ "$fstype" == "ntfs" ]; then
										fstype="ntfs -c"
									elif [ "$fstype" == "vfat" ]; then
										fstype="fat -c"
									else
										fstype="dd"
									fi
									imgpart="${imagePath}/d${intDisk}p${partNum}.img";
									pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imgpart &
									partclone.${fstype} -s $part -O /tmp/pigz1 -N 2>/tmp/status.fog
									mv ${imgpart}.000 ${imgpart}
									clearScreen;
									echo " * Image uploaded";
									sleep 1
									rm /tmp/pigz1
								done
								echo " * Task complete!";
								echo "";
							else
								handleError "Unable to create ${imagePath}";
							fi

						else
							handleError "Fatal Error: Disk device not found!";
						fi
						intDisk=`expr $intDisk + 1`;
					done
				else
					echo -n " * Looking for Hard Disks......................";
					getHardDisk
					echo "Done";
					echo " * Using Hard Disk: $hd";
					if [ -n "$hd" ]; then
						echo "";
						echo " * Now FOG will attempt to upload the image using DD.";
						echo "";
						echo " * Starting transfer, this may take a very long time...";
						echo "";
						dd if=${hd} | pigz -p $cores $PIGZ_COMP > $imagePath/${macWinSafe}.000
						sleep 1

						clearScreen;
					else
						handleError "Fatal Error: Disk device not found!";
					fi
				fi
				
				chmod -R 777 $imagePath

				queueinfo="";
				if [ "$osid" == "5" ] || [ "$osid" == "6" ]
				then
					imgType="mps";
				fi

				post="http://${web}service/Post_Stage2.php?to=$img&mac=$mac&ftp=$ftp&size=$size&imgid=$imgid&imgtype=$imgType&osid=$osid&type=$type"
				queueinfo=`wget -q -O - "$post" 2>/dev/null`
				while [ "$queueinfo" != "##" ]
				do
					echo "       * $queueinfo";
					queueinfo=`wget -q -O - "$post" 2>/dev/null`
					sleep 5;
				done
			else
				handleError "Fatal Error: Invalid image name;";
			fi
		else
			handleError "Fatal Error: Failed to mount NFS Volume.";
		fi
	else
		handleError " Fatal Error: Unknown request type :: $type";
	fi
else
	handleError " Fatal Error: Unknown request type :: Null";
fi

# DEBUG
fdisk -l &> /tmp/fdisk-after
