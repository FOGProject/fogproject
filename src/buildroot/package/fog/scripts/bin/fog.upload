<<<<<<< HEAD
#!/bin/sh
. /usr/share/fog/lib/funcs.sh;
. /bin/fog.checkin;
echo " * Preparing to send image file to server.";
imagePath="/images/$macWinSafe";
percent=$pct;
if [ $percent -ge 5 ]; then
	if [ ! $percent -lt 100 ]; then
		percent=5;
	fi
else
	percent=5;
fi
if [ $percent -lt 10 ]; then
	percent="0$percent";
fi
runPartprobe;
fog.statusreporter $mac $web &
dots "Checking Mounted File System";
if [ -f "/images/.mntcheck" ]; then
	echo "Done";
	echo "";
	if [ -n "$img" ]; then
		echo " * Using Image: $img";
		echo "";
		dots "Preparing backup location";
		if [ ! -d "$imagePath" ]; then
			mkdir -p "$imagePath" 2>/dev/null;
		fi
		chmod -R 777 $imagePath;
		rm -Rf "$imagePath/*";
		echo "Done";
		dots "Looking for Hard Disks";
		getHardDisk;
		echo "Done";
		echo " * Using Hard Disk: $hd";
		if [ ! -n $hd ]; then
			handleError "HD is null, no hard disk found!";
		fi
		debugPause
		# resizable image type
		#  discover windows partitions
		#  remove pagefile and hibernate file
		#  validate XP partition location
		#  save original partition table
		#  save MBR
		#  shrink filesystems and partitions
		#  save GRUB
		#  save shrunken partition table
		#  clone filesystems
		#  restore original MBR and partition table
		#  expand filesystems
		if [ "$imgType" == "n" ]; then
			validResizeOS;
			part="${hd}1";
			win7partcnt="0";
			win7sys="";
			fixed_size_partitions="";
			# All:
			#  find fixed size partitions, based on fstype
			parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
			for part in $parts; do
				fstype=`fsTypeSetting $part`;
				if [ "$fstype" != "extfs" -a "$fstype" != "ntfs" ]; then
					fixed_size_partitions="${fixed_size_partitions}:$part";
				fi
			done
			# Windows 7, 8, 8.1, Linux:
			#  find the number of windows partitions
			#  variables set
			#    : win7partcnt: number of partitions (1,2,3)
			#    : win7sys: partition with the system on it
			#    : part: partition to shrink
			#    : win7rec: the ntfs partition with boot loader or gpt
			#    : fixed_size_partitions: list of partitions that should not be resized
			#  assumes windows partitions are ntfs partitions
			#  assumes windows partitions are at the front of the disk (1,2,3, etc.)
			if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ] || [ "$osid" == "50" ]; then
				win7partcnt=`countNtfs $hd`;
				extfsavail=`countExtfs $hd`;
				if [ "$win7partcnt" == "0" ] && [ "$extfsavail" == "0" ]; then
					handleError "No resizable partitions found.";
				elif [ "$win7partcnt" == "1" ]; then
					part="${hd}1";
					win7sys="$part";
				elif [ "$win7partcnt" == "2" ]; then
					parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
					tmpCnt="0";
					for part in $parts; do
						if [ "$tmpCnt" == "0" ]; then
							win7rec="$part";
							fixed_size_partitions="${fixed_size_partitions}:$win7rec";
						elif [ "$tmpCnt" == "1" ]; then
							win7sys="$part";
							part="$part";
						fi
						tmpCnt=`expr $tmpCnt '+' 1`;
					done
				elif [ "$win7partcnt" == "3" ] && [ $(parted -m $hd print | grep $hd | cut -d: -f6) == "gpt" ]; then
					win7rec="gpt";
					win7sys=${hd}3;
					part=${hd}3;
					fixed_size_partitions="${fixed_size_partitions}:${hd}1:${hd}2";
				elif [ "$win7partcnt" -gt 3 ]; then
					handleError "More than 3 ntfs partitions found, not valid for this image type.";
				fi
				clearMountedDevices;
			fi
			# All: 
			#  save the list of fixed size partitions
			fixed_size_partitions=`echo $fixed_size_partitions | sed -r 's/[^:0-9]//g' | sed -r 's/^://'`;
			echo $fixed_size_partitions > "${imagePath}/d1.fixed_size_partitions";
			# Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
			#  Remove pagefile and hibernate file
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				removePageFile $win7sys
				debugPause
			fi
			# Windows 2000/XP:
			#  Make sure XP has the partition at the correct location
			if [ "$osid" == "1" ]; then
				partitionStart=`fdisk -lu | grep $part | awk '{print $3}'`;
				if [ "$partitionStart" == "" ]; then
					partitionStart="63";
				fi
				if [ "$partitionStart" != "63" ]; then
					handleError "FOG requires your Windows XP's partition start sector to be 63 but is ${partitionStart}";
				fi
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
			#  Save unmodified partition table for download use
			#  Start filesytem type record
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				dots "Saving original partition table";
				saveSfdiskPartitions "${hd}" "${imagePath}/d1.original.partitions";
				makeFstypesFile "${imagePath}/d1.original.fstypes";
				makeSwapUUIDFile "${imagePath}/d1.original.swapuuids";
				echo "Done";
				debugPause
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1:
			#  Save MBR
			#  Shrink filesystem and partition with system on it.
			#  Save partition table with shrunken partitions for use on download
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" ]; then
				dots "Backing up MBR";
				if [ "$win7rec" == "gpt" ]; then
					sgdisk -b /gpt.bak $hd 2>&1 >/dev/null;
				else
					dd if=$hd of=/mbr.backup count=1 bs=512 &>/dev/null;
				fi
				echo "Done";
				shrinkPartition $part "${imagePath}/d1.original.fstypes";
				debugPause
			fi
			# Linux:
			#  Detect partition table type
			#  Save MBR
			#  Attempt to shrink all filesystems and partitions, except swap, extended.
			#  Save partition table with shrunken partitions for use on download
			if [ "$osid" == "50" ]; then
				gptormbr=`gdisk -l $hd | grep 'GPT:' | awk '{$1=""; print $0}' | sed 's/^ //'`;
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				for part in $parts; do
					shrinkPartition $part "${imagePath}/d1.original.fstypes";
				done
				if [ "$gptormbr" == "not present" ]; then
					dots "Saving MBR and GRUB";
					saveGRUB "$hd" "1" "${imagePath}";
					saveSfdiskPartitions "${hd}" "${imagePath}/d1.minimum.partitions";
				else
					dots "Saving Partition Tables";
					sgdisk -b $imagePath/d1.mbr $hd 2>&1 >/dev/null;
				fi
				echo "Done";
				debugPause
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1:
			#  Actually clone the partitions now
			#  Restore the MBR
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" ]; then
				dots "Checking Hard Disks";
				runPartprobe;
				echo "Done";
				debugPause
				resetFlag $part
				mkfifo /tmp/pigz1;
				mkfifo /tmp/pigz2;
				mkfifo /tmp/pigz3;
				echo "";
				echo " * Now FOG will attempt to upload the image using Partclone.";
				echo "";
				if [ "$imgFormat" -gt 2 ]; then
					handleError "Invalid image format."
				fi
				if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
					if [ "$win7partcnt" == "1" ]; then
						echo " * Processing a Windows 7 System with 1 partition.";
						uploadFormat "$cores" "/tmp/pigz1" "$imagePath/sys.img";
						partclone.ntfs -c -s $win7sys -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
					elif [ "$win7partcnt" == "2" ]; then
						echo " * Processing a Windows 7 System with 2 partitions.";
						uploadFormat "$cores" "/tmp/pigz1" "$imagePath/rec.img";
						partclone.ntfs -c -s $win7rec -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						uploadFormat "$cores" "/tmp/pigz2" "$imagePath/sys.img";
						partclone.ntfs -c -s $win7sys -O /tmp/pigz2 -N -f 1 2>/tmp/status.fog;
					fi
					if [ "$imgFormat" == "2" ]; then
						echo " * Calculating Checksums";
						cd $imagePath;
						md5sum *.img* | cat >> $imagePath/filelist.txt;
						cd /;
					fi
				else
					uploadFormat "$cores" "/tmp/pigz1" "$imagePath/$macWinSafe";
					partclone.ntfs -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
				fi
				chmod -R 777 $imagePath;
				rm /tmp/pigz1;
				rm /tmp/pigz2;
				rm /tmp/pigz3;
				clear;
				dots "Restoring MBR";
				if [ "$win7partcnt" == "3" ] && [ "$win7rec" == "gpt" ]; then
					sgdisk -g -l /gpt.bak $hd 2>&1 >/dev/null;
				else
					dd if=/mbr.backup of=$hd &>/dev/null;
					fdisk $hd &>/dev/null << EOFRESTOREPART
w
EOFRESTOREPART
				fi
				echo "Done";
				debugPause
				if [ "$osid" == "2" ]; then
					correctVistaMBR $hd;
				fi
			# Linux:
			#  Actually clone the partitions now
			#  Restore the MBR
			elif [ "$osid" == "50" ]; then
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				diskLength=`expr length $hd`;
				for part in $parts; do
					mkfifo /tmp/pigz1;
					partNum=${part:$diskLength};
					echo " * Processing Partition: $part ($partNum)";
					fstype=`fsTypeSetting $part`;
					if [ "$fstype" != "swap" ]; then
						echo " * Using partclone.${fstype}";
						sleep 5;
						imgpart="$imagePath/d1p${partNum}.img";
						uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
						partclone.$fstype -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						mv $imgpart.000 $imgpart 2>/dev/null;
						clear;
						echo " * Image uploaded";
					else
						echo " * Not uploading swap partition";
						saveSwapUUID "${imagePath}/d1.original.swapuuids" "$part"; 
					fi
					rm /tmp/pigz1;
				done
				dots "Restoring MBR";
				applySfdiskPartitions "${hd}" "${imagePath}/d1.original.partitions";
				fdisk $hd &>/dev/null << EOFRESTOREPART
w
EOFRESTOREPART
				runPartprobe $hd;
				echo "Done";
				debugPause
			fi
			#  
			#  expand the file systems in the restored partitions
			#  
			# Windows 7, 8, 8.1:
			if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
			        expandPartition $win7sys
			# Windows 2000/XP, Vista:
			elif [ "$osid" == "1" -o "$osid" == "2" ]; then
			        expandPartition $part
			# Linux:
			elif [ "$osid" == "50" ]; then
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				for part in $parts; do
					expandPartition $part;
				done
			fi
		elif [ "$imgType" == "mps" ]; then
			gptormbr=`gdisk -l $hd | grep 'GPT:' | awk '{$1=""; print $0}' | sed 's/^ //'`;
			if [ "$gptormbr" == "not present" -a "$osid" == "50" ]; then
				have_extended_partition=`sfdisk -l $hd 2>/dev/null | egrep "^${hd}.*  (Extended|W95 Ext'd \(LBA\))$" | wc -l`;
			else
				have_extended_partition="0";
			fi
			if [ -d "$imagePath" ]; then
				makeSwapUUIDFile "${imagePath}/d1.original.swapuuids";
				if [ "$gptormbr" == "not present" -a "$osid" == "50" ]; then
					dots "Saving MBR and GRUB";
					saveGRUB "$hd" "1" "${imagePath}";
					if [ "$have_extended_partition" == "1" ]; then
						sfdisk -d $hd 2>/dev/null >${imagePath}/d1.partitions;
					fi
				elif [ "$gptormbr" == "not present" ]; then
					dots "Saving MBR";
					dd if=$hd of=$imagePath/d1.mbr count=1 bs=512 &>/dev/null;
					if [ "$have_extended_partition" == "1" ]; then
						sfdisk -d $hd 2>/dev/null >${imagePath}/d1.partitions;
					fi
				else
					dots "Saving Partition Tables";
					sgdisk -b $imagePath/d1.mbr $hd 2>&1 >/dev/null;
				fi
				echo "Done";
				debugPause
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				diskLength=`expr length $hd`;
				for part in $parts; do
					mkfifo /tmp/pigz1;
					partNum=${part:$diskLength};
					echo " * Processing Partition: $part ($partNum)";
					fstype=`fsTypeSetting $part`;
					if [ "$fstype" != "swap" ]; then
						echo -n " * Using partclone.";
						echo $fstype;
						sleep 5;
						imgpart="$imagePath/d1p${partNum}.img";
						uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
						partclone.$fstype -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						mv $imgpart.000 $imgpart 2>/dev/null;
						clear;
						echo " * Image uploaded";
					else
						echo " * Not uploading swap partition";
						saveSwapUUID "${imagePath}/d1.original.swapuuids" "$part"; 
					fi
					rm /tmp/pigz1;
				done
				echo " * Task complete!";
				debugPause
			else
				handleError "Unable to create $imagePath";
			fi
		elif [ "$imgType" == "mpa" ]; then
			disks=`fogpartinfo --list-devices 2>/dev/null`;
			intDisk=1;
			for disk in $disks; do
				echo " * Processing Hard Disk: $disk";
				gptormbr=`gdisk -l $disk | grep 'GPT:' | awk '{$1=""; print $0}' | sed 's/^ //'`;
				if [ "$gptormbr" == "not present" -a "$osid" == "50" ]; then
					have_extended_partition=`sfdisk -l $disk 2>/dev/null | egrep "^${disk}.*  (Extended|W95 Ext'd \(LBA\))$" | wc -l`;
				else
					have_extended_partition="0";
				fi
				if [ -d "$imagePath" ]; then
					makeSwapUUIDFile "${imagePath}/d${intDisk}.original.swapuuids";
					if [ "$gptormbr" == "not present" -a "$osid" == "50" -a "$intDisk" == "1" ]; then
						dots "Saving MBR and GRUB";
						saveGRUB "${disk}" "${intDisk}" "${imagePath}";
						if [ "$have_extended_partition" == "1" ]; then
							sfdisk -d $disk 2>/dev/null >${imagePath}/d${intDisk}.partitions;
						fi
					elif [ "$gptormbr" == "not present" ]; then
						dots "Saving MBR";
						dd if=$disk of=$imagePath/d${intDisk}.mbr count=1 bs=512 &>/dev/null;
						if [ "$have_extended_partition" == "1" ]; then
							sfdisk -d $disk 2>/dev/null >${imagePath}/d${intDisk}.partitions;
						fi
					else
						dots "Saving Partition Tables";
						sgdisk -b $imagePath/d${intDisk}.mbr $hd 2>&1 >/dev/null;
					fi
					echo "Done";
					debugPause
					parts=`fogpartinfo --list-parts $disk 2>/dev/null`;
					diskLength=`expr length $disk`;
					for part in $parts; do
						mkfifo /tmp/pigz1;
						partNum=${part:diskLength};
						echo " * Processing Partition: $part ($partNum)";
						fstype=`fsTypeSetting $part`;
						if [ "$fstype" != "swap" ]; then
							echo -n " * Using partclone.";
							echo $fstype;
							imgpart="$imagePath/d${intDisk}p${partNum}.img";
							uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
							partclone.$fstype -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
							mv $imgpart.000 $imgpart;
							clear;
							echo " * Image uploaded";
						else
							echo " * Not uploading swap partition";
							saveSwapUUID "${imagePath}/d${intDisk}.original.swapuuids" "$part"; 
						fi
						rm /tmp/pigz1;
					done
					debugPause
				else
					handleError "Unable to create $imagePath";
				fi
				intDisk=`expr $intDisk '+' 1`;
			done
		else
			imgpart="$imagePath/$img";
			mkfifo /tmp/pigz1;
			uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
			partclone.imager -c -s $hd -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
			rm /tmp/pigz1;
			clear;
		fi
		chmod -R 777 $imagePath;
		queueinfo="";
		if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
			imgType="mps";
		fi
		post="http://${web}service/Post_Stage2.php?to=$img&mac=$mac&ftp=$ftp&size=$size&imgid=$imgid&imgtype=$imgType&osid=$osid&type=$type"
		queueinfo=`wget -q -O - "$post" 2>/dev/null`;
		while [ "$queueinfo" != "##" ]; do
			echo "		* $queueinfo";
			queueinfo=`wget -q -O - "$post" 2>/dev/null`;
			sleep 5;
		done
	else
		handleError "Fatal Error: Invalid image name.";
	fi
else
	handleError "Fatal Error: Failed to mount NFS Volume.";
fi
=======
#!/bin/sh
. /usr/share/fog/lib/funcs.sh;
. /bin/fog.checkin;
echo " * Preparing to send image file to server.";
imagePath="/images/$macWinSafe";
percent=$pct;
if [ $percent -ge 5 ]; then
	if [ ! $percent -lt 100 ]; then
		percent=5;
	fi
else
	percent=5;
fi
if [ $percent -lt 10 ]; then
	percent="0$percent";
fi
runPartprobe;
fog.statusreporter $mac $web &
dots "Checking Mounted File System";
if [ -f "/images/.mntcheck" ]; then
	echo "Done";
	echo "";
	if [ -n "$img" ]; then
		echo " * Using Image: $img";
		echo "";
		dots "Preparing backup location";
		if [ ! -d "$imagePath" ]; then
			mkdir -p "$imagePath" 2>/dev/null;
		fi
		chmod -R 777 $imagePath;
		rm -Rf "$imagePath/*";
		echo "Done";
		dots "Looking for Hard Disks";
		getHardDisk;
		echo "Done";
		echo " * Using Hard Disk: $hd";
		if [ ! -n $hd ]; then
			handleError "HD is null, no hard disk found!";
		fi
		debugPause
		# resizable image type
		#  discover windows partitions
		#  remove pagefile and hibernate file
		#  validate XP partition location
		#  save original partition table
		#  save MBR
		#  shrink filesystems and partitions
		#  save GRUB
		#  save shrunken partition table
		#  clone filesystems
		#  restore original MBR and partition table
		#  expand filesystems
		if [ "$imgType" == "n" ]; then
			validResizeOS;
			part="${hd}1";
			win7partcnt="0";
			win7sys="";
			fixed_size_partitions="";
			# All:
			#  find fixed size partitions, based on fstype
			parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
			for part in $parts; do
				fstype=`fsTypeSetting $part`;
				if [ "$fstype" != "extfs" -a "$fstype" != "ntfs" ]; then
					fixed_size_partitions="${fixed_size_partitions}:$part";
				fi
			done
			# Windows 7, 8, 8.1, Linux:
			#  find the number of windows partitions
			#  variables set
			#    : win7partcnt: number of partitions (1,2,3)
			#    : win7sys: partition with the system on it
			#    : part: partition to shrink
			#    : win7rec: the ntfs partition with boot loader or gpt
			#    : fixed_size_partitions: list of partitions that should not be resized
			#  assumes windows partitions are ntfs partitions
			#  assumes windows partitions are at the front of the disk (1,2,3, etc.)
			if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ] || [ "$osid" == "50" ]; then
				win7partcnt=`countNtfs $hd`;
				extfsavail=`countExtfs $hd`;
				if [ "$win7partcnt" == "0" ] && [ "$extfsavail" == "0" ]; then
					handleError "No resizable partitions found.";
				elif [ "$win7partcnt" == "1" ]; then
					part="${hd}1";
					win7sys="$part";
				elif [ "$win7partcnt" == "2" ]; then
					parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
					tmpCnt="0";
					for part in $parts; do
						if [ "$tmpCnt" == "0" ]; then
							win7rec="$part";
							fixed_size_partitions="${fixed_size_partitions}:$win7rec";
						elif [ "$tmpCnt" == "1" ]; then
							win7sys="$part";
							part="$part";
						fi
						tmpCnt=`expr $tmpCnt '+' 1`;
					done
				elif [ "$win7partcnt" == "3" ] && [ $(parted -m $hd print | grep $hd | cut -d: -f6) == "gpt" ]; then
					win7rec="gpt";
					win7sys=${hd}3;
					part=${hd}3;
					fixed_size_partitions="${fixed_size_partitions}:${hd}1:${hd}2";
				elif [ "$win7partcnt" == "4" ] && [ $(parted -m $hd print | grep $hd | cut -d: -f6) == "gpt" ]; then
					win7rec="gpt";
					win7sys=${hd}4;
					part=${hd}4;
					fixed_size_partitions="${fixed_size_partitions}:${hd}1:${hd}2:${hd}3";
				elif [ "$win7partcnt" -gt 4 ]; then
					handleError "More than 4 ntfs partitions found, not valid for this image type.";
				fi
				clearMountedDevices;
			fi
			# All: 
			#  save the list of fixed size partitions
			fixed_size_partitions=`echo $fixed_size_partitions | sed -r 's/[^:0-9]//g' | sed -r 's/^://'`;
			echo $fixed_size_partitions > "${imagePath}/d1.fixed_size_partitions";
			# Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
			#  Remove pagefile and hibernate file
			if [ "$osid" == "1" -o "$osid" == "2" ]; then
				removePageFile $part;
			elif [ "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" ]; then
				removePageFile $win7sys;
			fi
			debugPause
			# Windows 2000/XP:
			#  Make sure XP has the partition at the correct location
			if [ "$osid" == "1" ]; then
				partitionStart=`fdisk -lu | grep $part | awk '{print $3}'`;
				if [ "$partitionStart" == "" ]; then
					partitionStart="63";
				fi
				if [ "$partitionStart" != "63" ]; then
					handleError "FOG requires your Windows XP's partition start sector to be 63 but is ${partitionStart}";
				fi
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1, Linux:
			#  Save unmodified partition table for download use
			#  Start filesytem type record
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				dots "Saving original partition table";
				saveSfdiskPartitions "${hd}" "${imagePath}/d1.original.partitions";
				makeFstypesFile "${imagePath}/d1.original.fstypes";
				makeSwapUUIDFile "${imagePath}/d1.original.swapuuids";
				echo "Done";
				debugPause
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1:
			#  Save MBR
			#  Shrink filesystem and partition with system on it.
			#  Save partition table with shrunken partitions for use on download
			# Linux:
			#  Detect partition table type
			#  Save MBR
			#  Attempt to shrink all filesystems and partitions, except swap, extended.
			#  Save partition table with shrunken partitions for use on download
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "3" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				gptormbr=`gdisk -l $hd | grep 'GPT:' | awk '{$1=""; print $0}' | sed 's/^ //'`;
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				for part in $parts; do
					shrinkPartition $part "${imagePath}/d1.original.fstypes";
				done
				if [ "$gptormbr" == "not present" ]; then
					dots "Saving MBR and GRUB";
					saveGRUB "$hd" "1" "${imagePath}";
					saveSfdiskPartitions "${hd}" "${imagePath}/d1.minimum.partitions";
				else
					dots "Saving Partition Tables";
					sgdisk -b $imagePath/d1.mbr $hd 2>&1 >/dev/null;
				fi
				echo "Done";
				debugPause
			fi
			# Windows 2000/XP, Vista, 7, 8, 8.1:
			#  Actually clone the partitions now
			#  Restore the MBR
			# Linux:
			#  Actually clone the partitions now
			#  Restore the MBR
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				dots "Checking Hard Disks";
				runPartprobe $hd;
				echo "Done";
				debugPause;
				if [ "$osid" != "50" ]; then
					resetFlag $part;
				fi
				debugPause;
				echo "";
				echo " * Now FOG will attempt to upload the image using Partclone.";
				echo "";
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				diskLength=`expr length $hd`;
				for part in $parts; do
					mkfifo /tmp/pigz1;
					partNum=${part:$diskLength};
					echo " * Processing Partition: $part ($partNum)";
					fstype=`fsTypeSetting $part`;
					if [ "$fstype" != "swap" ]; then
						echo " * Using partclone.${fstype}";
						sleep 5;
						imgpart="$imagePath/d1p${partNum}.img";
						uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
						partclone.$fstype -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						mv $imgpart.000 $imgpart 2>/dev/null;
						clear;
						echo " * Image uploaded";
					else
						echo " * Not uploading swap partition";
						saveSwapUUID "${imagePath}/d1.original.swapuuids" "$part"; 
					fi
					rm /tmp/pigz1;
					debugPause;
				done
				dots "Restoring MBR";
				applySfdiskPartitions "${hd}" "${imagePath}/d1.original.partitions";
				fdisk $hd &>/dev/null << EOFRESTOREPART
w
EOFRESTOREPART
				runPartprobe $hd;
				echo "Done";
				debugPause;
				if [ "$osid" == "2" ]; then
					correctVistaMBR $hd;
				fi
				debugPause;
			fi
			#  
			#  expand the file systems in the restored partitions
			#  
			# Windows 7, 8, 8.1:
			# Windows 2000/XP, Vista:
			# Linux:
			if [ "$osid" == "1" -o "$osid" == "2" -o "$osid" == "5" -o "$osid" == "6" -o "$osid" == "7" -o "$osid" == "50" ]; then
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				for part in $parts; do
					expandPartition $part;
				done
			fi
		elif [ "$imgType" == "mps" ]; then
			hasgpt=`hasGPT $hd`;
			if [ "$hasgpt" == "0" -a "$osid" == "50" ]; then
				have_extended_partition=`sfdisk -l $hd 2>/dev/null | egrep "^${hd}.*  (Extended|W95 Ext'd \(LBA\))$" | wc -l`;
			else
				have_extended_partition="0";
			fi
			if [ -d "$imagePath" ]; then
				savePartitionTablesAndBootLoaders "$hd" "1" "$imagePath" "$osid" "$hasgpt" "$have_extended_partition" "$imgPartitionType"
				debugPause
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				diskLength=`expr length $hd`;
				for part in $parts; do
					savePartition "$part" "1" "$imagePath" "$diskLength" "$cores" "$imgPartitionType"
					debugPause;
				done
				echo " * Task complete!";
			else
				handleError "Unable to create $imagePath";
			fi
		elif [ "$imgType" == "mpa" ]; then
			disks=`fogpartinfo --list-devices 2>/dev/null`;
			intDisk=1;
			for disk in $disks; do
				echo " * Processing Hard Disk: $disk";
				hasgpt=`hasGPT $disk`;
				if [ "$hasgpt" == "0" -a "$osid" == "50" ]; then
					have_extended_partition=`sfdisk -l $disk 2>/dev/null | egrep "^${disk}.*  (Extended|W95 Ext'd \(LBA\))$" | wc -l`;
				else
					have_extended_partition="0";
				fi
				if [ -d "$imagePath" ]; then
					savePartitionTablesAndBootLoaders "$disk" "$intDisk" "$imagePath" "$osid" "$hasgpt" "$have_extended_partition" "$imgPartitionType"
					debugPause
					parts=`fogpartinfo --list-parts $disk 2>/dev/null`;
					diskLength=`expr length $disk`;
					for part in $parts; do
						savePartition "$part" "$intDisk" "$imagePath" "$diskLength" "$cores" "$imgPartitionType"
						debugPause;
					done
				else
					handleError "Unable to create $imagePath";
				fi
				echo " * Disk $disk complete!";
				intDisk=`expr $intDisk '+' 1`;
				debugPause;
			done
		else
			imgpart="$imagePath/$img";
			mkfifo /tmp/pigz1;
			uploadFormat "$cores" "/tmp/pigz1" "$imgpart";
			partclone.imager -c -s $hd -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
			rm /tmp/pigz1;
			clear;
		fi
		chmod -R 777 $imagePath;
		queueinfo="";
		if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
			imgType="mps";
		fi
		post="http://${web}service/Post_Stage2.php?to=$img&mac=$mac&ftp=$ftp&size=$size&imgid=$imgid&imgtype=$imgType&osid=$osid&type=$type"
		queueinfo=`wget -q -O - "$post" 2>/dev/null`;
		while [ "$queueinfo" != "##" ]; do
			echo "		* $queueinfo";
			queueinfo=`wget -q -O - "$post" 2>/dev/null`;
			sleep 5;
		done
	else
		handleError "Fatal Error: Invalid image name.";
	fi
else
	handleError "Fatal Error: Failed to mount NFS Volume.";
fi
# Local Variables:
# indent-tabs-mode: t
# sh-basic-offset: 4
# sh-indentation: 4
# tab-width: 4
# End:
>>>>>>> dev-branch
