#!/bin/sh
. /usr/share/fog/lib/funcs.sh
# No donate here as upload is expensive in terms of CPU!!!
#. /bin/fog.donate
. /bin/fog.checkin;
echo " * Preparing to send image file to server.";
imagePath="/images/$macWinSafe";
percent=$pct;
if [ $percent -ge 5 ]; then
	if [ ! $percent -lt 100 ]; then
		percent=5;
	fi
else
	percent=5;
fi
if [ $percent -lt 10 ]; then
	percent="0$percent";
fi
runPartprobe;
fog.statusreporter $mac $web &
dots "Checking Mounted File System";
if [ -f "/images/.mntcheck" ]; then
	echo "Done";
	echo "";
	if [ -n "$img" ]; then
		echo " * Using Image: $img";
		echo "";
		dots "Preparing backup location";
		if [ ! -d "$imagePath" ]; then
			mkdir -p "$imagePath" 2>/dev/null;
		fi
		chmod -R 777 $imagePath;
		rm -Rf "$imagePath/*";
		echo "Done";
		dots "Looking for Hard Disks";
		getHardDisk;
		echo "Done";
		gptormbr=`gdisk -l $hd | grep 'GPT:' | awk '{$1=""; print $0}' | sed 's/^ //'`;
		echo " * Using Hard Disk: $hd";
		if [ ! -n $hd ]; then
			handleError "HD is null, no hard disk found!";
		fi
		if [ "$imgType" == "n" ]; then
			if [ "$osid" != "1" ] && [ "$osid" != "2" ] && [ "$osid" != "5" ] && [ "$osid" != "6" ]; then
				handleError " * Invalid operating system id: $osname ($osid)!";
			fi
			part="${hd}1";
			win7partcnt="0";
			win7sys="";
			if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				for part in $parts; do
					win7partcnt=`expr $win7partcnt '+' 1`;
				done
				if [ "$win7partcnt" == "0" ]; then
					handleError "No partitions found.";
				elif [ "$win7partcnt" == "1" ]; then
					win7sys="$part";
					part="${hd}1";
				elif [ "$win7partcnt" == "2" ]; then
					tmpCnt="0";
					for part in $parts; do
						if [ "$tmpCnt" == "0" ]; then
							win7rec="$part";
						elif [ "$tmpCnt" == "1" ]; then
							win7sys="$part";
							part="$part";
						fi
						tmpCnt=`expr $tmpCnt '+' 1`;
					done
				elif [ "$win7partcnt" == "3" ] && [ $(parted -m $hd print | grep $hd | cut -d: -f6) == "gpt" ]; then
					win7rec="gpt";
					win7sys=${hd}3;
					part=${hd}3;
				else
					handleError "More than 3 partitions found, not valid for this image type.";
				fi
				clearMountedDevices;
			fi
			if [ "$ignorepg" == "1" ]; then
				dots "Mounting device";
				mkdir /ntfs &>/dev/null;
				ntfs-3g -o force,rw $part /ntfs;
				if [ "$?" == "0" ]; then
					echo "Done";
					dots "Removing page file";
					rm -f "/ntfs/pagefile.sys";
					echo "Done";
					dots "Removing hibernate file";
					rm -f "/ntfs/hiberfil.sys";
					echo "Done";
					umount /ntfs;
				else
					echo "Failed";
				fi
			fi
			diskSize=`parted -s $hd u kB print | grep "Disk" | grep -v "Flags" | sed 's/Disk \/dev\/[a-zA-Z0-9]*: //' | sed 's/kB//'`;
			if [ "$osid" == "1" ]; then
				partitionStart=`fdisk -lu | grep $part | awk '{print $3}'`;
				if [ "$partitionStart" == "" ]; then
					partitionStart="63";
				fi
				if [ "$partitionStart" != "63" ]; then
					handleError "FOG requires your Windows XP's partition start sector to be 63 but is ${partitionStart}";
				fi
			fi
			ntfsresizetest="ntfsresize -f -i -P $part";
			size=`$ntfsresizetest | grep "You might resize" | cut -d" " -f5`;
			if [ -n "$size" ]; then
				sizentfsresize=`expr $size '/' 1000`;
				sizentfsresize=`expr $sizentfsresize '+' 300000`;
				sizentfsresize=`expr $sizentfsresize '*' 1$percent '/' 100`;
				sizefd=`expr $sizentfsresize '*' 103 '/' 100`;
				echo "";
				echo " * Possible partition size: $sizentfsresize k";
				dots "Running resize test";
				tmpSuc=`ntfsresize -f -n -s ${sizentfsresize}k $part << EOFNTFS
Y
EOFNTFS`
				success=`echo $tmpSuc | grep "ended successfully"`;
				echo "Done";
				if [ -n "$success" ]; then
					echo " * Resize test was successful";
					
					dots "Backing up MBR";
					if [ "$win7rec" == "gpt" ]; then
						sgdisk -b /gpt.bak $hd 2>&1 >/dev/null;
					else
						dd if=$hd of=/mbr.backup count=1 bs=512 &>/dev/null;
					fi
					echo "Done";
					
					dots "Resizing partition";
					ntfsresize -f -s ${sizentfsresize}k $part &>/dev/null << FORCEY
y
FORCEY
					echo "Done";
					if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
						if [ "$win7partcnt" == "1" ]; then
							win7part1start=`parted -s $hd u kB print | sed -e '/^.1/!d' -e 's/^ [0-9]*[ ]*//' -e 's/kB  .*//'`;
							if [ "$win7part1start" == "" ]; then
								handleError "Unable to determine disk start location.";
							fi
							adjustedfdsize=`expr $sizefd '+' $win7part1start`;
							parted -s $hd u kB rm 1 &>/dev/null;
							parted -s $hd -a opt u kB mkpart primary ntfs 2048s ${adjustedfdsize}kB &>/dev/null;
    						parted -s $hd u kB set 1 boot on &>/dev/null
						elif [ "$win7partcnt" == "2" ]; then
							win7part2start=`parted -s $hd u B print | sed -e '/^.2/!d' -e 's/^ [0-9]*[ ]*//' -e 's/kB  .*//'`;
							if [ "$win7part2start" == "" ]; then
								handleError "Unable to determine disk start location.";
							fi
							adjustedfdsize=`expr $sizefd '+' $win7part2start`;
							parted -s $hd -a opt u kB mkpart primary ntfs ${defaultpart2start}B ${adjustedfdsize}kB &>/dev/null;
    						parted -s $hd u kB set 1 boot on &>/dev/null
						else
							handleError "Invalid partition count.";
						fi
					else
						parted -s $hd rm 1 &>/dev/null;
						parted -s $hd u kB mkpart primary ntfs ${partitionStart}s 99% &>/dev/null;
						parted -s $hd u kB set 1 boot on &>/dev/null;
					fi
					if [ "$osid" == "2" ]; then
						correctVistaMBR $hd;
					fi
					
					dots "Checking Hard Disks";
					runPartprobe;
					echo "Done";
					
        			        resetFlag $part
					
					mkfifo /tmp/pigz1;
					mkfifo /tmp/pigz2;
					mkfifo /tmp/pigz3;
					echo "";
					echo " * Now FOG will attempt to upload the image using Partclone.";
					echo "";
					if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
						if [ "$win7partcnt" == "1" ]; then
							echo " * Processing a Windows 7 System with 1 partition.";
							pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/sys.img.000 &
							partclone.ntfs -c -s $win7sys -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						elif [ "$win7partcnt" == "2" ]; then
							echo " * Processing a Windows 7 System with 2 partitions.";
							pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/rec.img.000 &
							partclone.ntfs -c -s $win7rec -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
							pigz -p $cores $PIGZ_COMP < /tmp/pigz2 > $imagePath/sys.img.000 &
							partclone.ntfs -c -s $win7sys -O /tmp/pigz2 -N -f 1 2>/tmp/status.fog;
						fi
					else
						pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imagePath/${macWinSafe}.000 &
						partclone.ntfs -c -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
					fi
					chmod -R 777 $imagePath;
					rm /tmp/pigz1;
					rm /tmp/pigz2;
					rm /tmp/pigz3;
					clear;
					dots "Restoring MBR";
					if [ "$win7partcnt" == "3" ] && [ "$win7rec" == "gpt" ]; then
						sgdisk -g -l /gpt.bak $hd 2>&1 >/dev/null;
					else
						dd if=/mbr.backup of=$hd &>/dev/null;
						fdisk $hd &>/dev/null << EOFRESTOREPART
w
EOFRESTOREPART
					fi
					echo "Done";
					
					if [ "$osid" == "2" ]; then
						correctVistaMBR $hd;
					fi
					
					if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
					        expandPartition $win7sys
					else
					        expandPartition $part
					fi
				else
					handleError "Resize test failed!\n $tmpSuc";
				fi
			else
				tmpoutput=`$ntfsresizetest;`;
				handleError " Fatal Error, Unable to determine possible ntfs size\n * To better help you debug we will run the ntfs resize\n\tbut this time with full output, please wait!\n\s$tmpoutput";
			fi
		elif [ "$imgType" == "mps" ]; then
			if [ -d "$imagePath" ]; then
				if [ "$gptormbr" == "not present" -a "$osid" == "50" ]; then
					dots "Saving MBR and GRUB";
					dd if=$hd of=$imagePath/d1.mbr count=63 bs=512 &>/dev/null;
				elif [ "$gptormbr" == "not present" ]; then
					dots "Saving MBR";
					dd if=$hd of=$imagePath/d1.mbr count=1 bs=512 &>/dev/null;
				else
					dots "Saving Partition Tables";
					sgdisk -b $imagePath/d1.mbr $hd 2>&1 >/dev/null;
				fi
				echo "Done";
				parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
				diskLength=`expr length $hd`;
				for part in $parts; do
					mkfifo /tmp/pigz1;
					partNum=${part:$diskLength};
					echo " * Processing Partition: $part ($partNum)";
					fstype=`blkid -po udev $part | grep FS_TYPE | awk -F'=' '{print $2}'`;
					echo -n "	* Partition type is: ($fstype)  Using partclone.";
					if [ "$fstype" == "ext4" ] || [ "$fstype" == "ext3" ] || [ "$fstype" == "ext2" ]; then
						fstype="extfs -c";
						echo $fstype;
						sleep 10;
					elif [ "$fstype" == "ntfs" ]; then
						fstype="ntfs -c";
						echo $fstype;
						sleep 10;
					elif [ "$osid" != "6" ] && [ "$fstype" == "vfat" ]; then
						fstype="fat -c";
						echo $fstype;
						sleep 10;
					elif [ "$osid" == "6" ] && [ "$fstype" == "vfat" ]; then
						fstype="imager -c";
						echo $fstype;
						sleep 10;
					else
						fstype="imager -c";
						echo $fstype;
						sleep 10;
					fi
					imgpart="$imagePath/d1p${partNum}.img";
					pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imgpart &
					partclone.$fstype -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
					mv $imgpart.000 $imgpart 2>/dev/null;
					clear;
					echo " * Image uploaded";
					rm /tmp/pigz1;
				done
				echo " * Task complete!";
			else
				handleError "Unable to create $imagePath";
			fi
		elif [ "$imgType" == "mpa" ]; then
			disks=`fogpartinfo --list-devices 2>/dev/null`;
			intDisk=1;
			for disk in $disks; do
				echo " * Processing Hard Disk: $disk";
				if [ -d "$imagePath" ]; then
					if [ "$gptormbr" == "not present" -a "$osid" == "50" -a "$intDisk" == "1" ]; then
						dots "Saving MBR and GRUB";
						dd if=$disk of=$imagePath/d${intDisk}.mbr count=63 bs=512 &>/dev/null;
					elif [ "$gptormbr" == "not present" ]; then
						dots "Saving MBR";
						dd if=$disk of=$imagePath/d${intDisk}.mbr count=1 bs=512 &>/dev/null;
					else
						dots "Saving Partition Tables";
						sgdisk -b $imagePath/d${intDisk}.mbr $hd 2>&1 >/dev/null;
					fi
					echo "Done";
					parts=`fogpartinfo --list-parts $disk 2>/dev/null`;
					diskLength=`expr length $disk`;
					for part in $parts; do
						mkfifo /tmp/pigz1;
						partNum=${part:diskLength};
						echo " * Processing Partition: $part ($partNum)";
						fstype=`blkid -po udev $part | grep FS_TYPE | awk -F'=' '{print $2}'`;
						echo -n "	* Partition type is: ($fstype)  Using partclone.";
						if [ "$fstype" == "ext4" ] || [ "$fstype" == "ext3" ] || [ "$fstype" == "ext2" ]; then
							fstype="extfs -c";
							echo $fstype;
							sleep 10;
						elif [ "$fstype" == "ntfs" ]; then
							fstype="ntfs -c";
							echo $fstype;
							sleep 10;
						elif [ "$osid" != "6" ] && [ "$fstype" == "vfat" ]; then
							fstype="fat -c";
							echo $fstype;
							sleep 10;
						elif [ "$osid" == "6" ] && [ "$fstype" == "vfat" ]; then
							fstype="imager -c";
							echo $fstype;
							sleep 10;
						else
							fstype="imager -c";
							echo $fstype;
							sleep 10;
						fi
						imgpart="$imagePath/d${intDisk}p${partNum}.img";
						pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imgpart &
						partclone.$fstype -s $part -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
						mv $imgpart.000 $imgpart;
						clear;
						echo " * Image uploaded";
						rm /tmp/pigz1;
					done
				else
					handleError "Unable to create $imagePath";
				fi
				intDisk=`expr $intDisk '+' 1`;
			done
		else
			imgpart="$imagePath/$img";
			mkfifo /tmp/pigz1;
			pigz -p $cores $PIGZ_COMP < /tmp/pigz1 > $imgpart &
			partclone.imager -c -s $hd -O /tmp/pigz1 -N -f 1 2>/tmp/status.fog;
			rm /tmp/pigz1;
			clear;
		fi
		chmod -R 777 $imagePath;
		queueinfo="";
		if [ "$osid" == "5" ] || [ "$osid" == "6" ]; then
			imgType="mps";
		fi
		post="http://${web}service/Post_Stage2.php?to=$img&mac=$mac&ftp=$ftp&size=$size&imgid=$imgid&imgtype=$imgType&osid=$osid&type=$type"
		queueinfo=`wget -q -O - "$post" 2>/dev/null`;
		while [ "$queueinfo" != "##" ]; do
			echo "		* $queueinfo";
			queueinfo=`wget -q -O - "$post" 2>/dev/null`;
			sleep 5;
		done
	else
		handleError "Fatal Error: Invalid image name.";
	fi
else
	handleError "Fatal Error: Failed to mount NFS Volume.";
fi
