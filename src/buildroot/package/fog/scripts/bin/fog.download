#!/bin/sh
. /usr/share/fog/lib/funcs.sh;
. /bin/fog.donate;
. /bin/fog.checkin;
layPartSize="-1s";
imagePath="/images/$img";
win7imgroot="$imagePath";
fog.statusreporter $mac $web &
dots "Checking Mounted File System";
if [ ! -f "/images/.mntcheck" ]; then
	handleError "Fatal Error: Failed to mount NFS Volume.\n* If you believe the filesystem is mounted,\n\tmake sure you have a file called .mntcheck\n\tin the directory you are mounting on the server";
	exit 1;
fi
echo "Done";
debugPause;
echo "";
echo " * Starting Image Push";
if [ -n "$img" ] || [ "$mc" == "yes" ]; then
	if [ "$mc" != "yes" ]; then
		echo " * Using Image: $img";
		echo "";
	fi
fi
dots "Looking for Hard Disks";
getHardDisk;
echo "Done";
debugPause;
if [ ! -n $hd ]; then
	handleError "HD is null, no hard disk found.";
	exit 1;
fi
echo " * Using Hard Disk: $hd";
# Generates the partitions.  If singledisk resizeable, it generates
# based on default normal values.
# Otherwise it uses MBR/GPT to generate the partition table(s).
if [ "$imgType" == "n" ]; then
	validResizeOS;
	enableWriteCache $hd;
	cd /images;
	part="${hd}1";
	win7partcnt="0";
	win7rec="";
	win7sys="";
	if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
		dots "Windows Boot Partition Exists";
		if [ -f "$win7imgroot/rec.img.000" ]; then
			echo "Yes";
			win7partcnt="2";
			win7rec="${hd}1";
			win7sys="${hd}2";
			part=$win7sys;
		elif [ -f "$win7imgroot/gpt.bak" ]; then
			win7partcnt="3";
			win7rec="gpt";
			win7sys="${hd}3";
			part=$win7sys;
		else
			echo "No";
			win7partcnt="1";
			win7sys="${hd}1";
		fi
		debugPause;
		if [ -f "$win7imgroot/sys.img.000" ] || [ "$mc" == "yes" ] ; then
			dots "Preparing Hard Disks (Stage 1)";
			if [ "$nombr" == "1" ]; then
				echo "Skipped";
			else
				dd if=/dev/zero of=$hd bs=512 count=20 &>/dev/null;
				parted -s $hd mktable msdos &>/dev/null;
				dd if=$mbrfile  of=$hd bs=512 count=1  &>/dev/null;
				echo "Done";
			fi
			diskSize=`parted -s $hd u kB print | grep "Disk" | grep -v "Flags" | sed 's/Disk \/dev\/[a-zA-Z0-9]*: //' | sed 's/kB//'`;
			if [ $diskSize -gt 2199023256 ]; then
				layPartSize="2tB";
			fi
			if [ "$win7partcnt" == "1" ]; then
				dots "Preparing Hard Disks (Stage 2)";
				parted -s $hd rm 1 &>/dev/null;
				echo "Done";
				dots "Preparing Hard Disks (Stage 3)";
				if [ "$imgFormat" == "1" -o "$imgLegacy" == "1" ]; then
					parted -s $hd -a opt mkpart primary ntfs 63s -- $layPartSize &>/dev/null;
				else
					parted -s $hd -a opt mkpart primary ntfs 2048s -- $layPartSize &>/dev/null;
				fi
				parted -s $hd set 1 boot on &>/dev/null;
			elif [ "$win7partcnt" == "2" ]; then
				dots "Preparing Hard Disks (Stage 2)";
				parted -s $hd rm 2 &>/dev/null;
				echo "Done";
				dots "Preparing Hard Disks (Stage 3)";
				parted -s $hd -a opt mkpart primary ntfs $defaultpart2start -- $layPartSize &>/dev/null;
			elif [ "$win7partcnt" == "3" ]; then
				dots "Preparing Hard Disks (Stage 2)";
				sgdisk --zap-all $hd 2>&1 >/dev/null;
				runPartprobe $hdyy;
				sgdisk --mbrtogpt --load-backup=$win7imgroot/gpt.bak --move-second-header $hd &>/dev/null;
				echo "Done";
				dots "Preparing Hard Disks (Stage 3)";
				sgdisk -x 3:$(sgdisk -E $hd) $hd &>/dev/null;
			fi
			echo "Done";
			debugPause;
		else
			handleError "Unable to locate image file for Windows 7/8! (sys.img.000)";
		fi
	elif [ "$osid" == "1" ]; then
		dots "Preparing Hard Disks (Stage 1)";
		if [ "$nombr" == "1" ]; then
			echo "Skipped";
		else
			dd if=/dev/zero of=$hd bs=512 count=20 &>/dev/null;
			parted -s $hd mktable msdos &>/dev/null;
			dd if=$mbrfile  of=$hd bs=512 count=1  &>/dev/null;
			echo "Done";
		fi
		debugPause;
		dots "Preparing Hard Disks (Stage 2)";
		parted -s $hd rm 1 &>/dev/null;
		runPartprobe $hd;
		echo "Done";
		dots "Preparing hard Disks (Stage 3)";
		parted -s $hd -a opt mkpart primary ntfs 63s -- $layPartSize &>/dev/null;
		parted -s $hd set 1 boot on &>/dev/null;
		echo "Done";
		debugPause;
	elif [ "$osid" == "2" ]; then
		dots "Preparing Hard Disks (Stage 1)";
		if [ "$nombr" == "1" ]; then
			echo "Skipped";
		else
			dd if=/dev/zero of=$hd bs=512 count=20 &>/dev/null;
			parted -s $hd mktable msdos &>/dev/null;
			dd if=$mbrfile  of=$hd bs=512 count=1  &>/dev/null;
			echo "Done";
		fi
		debugPause;
		dots "Preparing Hard Disks (Stage 2)";
		parted -s $hd rm 2 &>/dev/null;
		runPartprobe $hd;
		echo "Done";
		dots "Preparing Hard Disks (Stage 3)";
		parted -s $hd -a opt mkpart primary ntfs $defaultpart2start -- $layPartSize &>/dev/null;
		echo "Done";
		correctVistaMBR $hd;
		debugPause;
	# Linux:
	#  restore MBR/GRUB
	#  resize original partition table to current disk, and apply it
	elif [ "$osid" == "50" ]; then
		dots "Erasing current MBR/GPT Tables";
		sgdisk -Z $hd >/dev/null;
		runPartprobe $hd;
		echo "Done";
		debugPause;
		tmpMBR="$imagePath/d1.mbr";
		has_GRUB=`hasGRUB "${hd}" "1" "${imagePath}"`;
		mbrsize=`ls -l $tmpMBR | awk '{print $5}'`;
		if [ -f $tmpMBR ]; then
			if [ "$mbrsize" != "32256" -a "$has_GRUB" != "1" ] && [ "$mbrsize" != "512" ]; then
				dots "Restoring Partition Tables";
				sgdisk -gel $tmpMBR $hd 2>&1 >/dev/null;
				gptcheck="yes";
			elif [ "$mbrsize" == "32256" -o "$has_GRUB" == "1" ]; then
				dots "Restoring MBR and GRUB";
				restoreGRUB "${hd}" "1" "${imagePath}";
				echo "Done";
				debugPause;
				dots "Expanding partition table to fill disk";
				if [ -r "${imagePath}/d1.fixed_size_partitions" ]; then
					fixed_size_partitions=`cat ${imagePath}/d1.fixed_size_partitions`;
				else
					fixed_size_partitions="";
				fi
				fillDiskWithPartitions "${hd}" "${imagePath}/d1.original.partitions" "${fixed_size_partitions}";
			else
				dots "Restoring MBR";
				dd if=$tmpMBR of=$hd bs=512 count=1 &>/dev/null;
				echo "Done";
				debugPause;
				dots "Expanding partition table to fill disk";
				if [ -r "${imagePath}/d1.fixed_size_partitions" ]; then
					fixed_size_partitions=`cat ${imagePath}/d1.fixed_size_partitions`;
				else
					fixed_size_partitions="";
				fi
				fillDiskWithPartitions "${hd}" "${imagePath}/d1.original.partitions" "${fixed_size_partitions}";
			fi
			runPartprobe $hd;
			echo "Done";
			debugPause;
			sleep 3;
		else
			handleError "Image Store Corrupt: Unable to locate MBR.";
		fi
	fi
elif [ "$imgType" == "mps" ]; then
	if [ -d "$imagePath" ]; then
		dots "Erasing current MBR/GPT Tables";
		sgdisk -Z $hd >/dev/null;
		runPartprobe;
		echo "Done";
		debugPause;
		tmpMBR="$imagePath/d1.mbr";
		has_GRUB=`hasGRUB "${hd}" "1" "${imagePath}"`;
		mbrsize=`ls -l $tmpMBR | awk '{print $5}'`;
		if [ -f $tmpMBR ]; then
			if [ "$mbrsize" != "32256" -a "$has_GRUB" != "1" ] && [ "$mbrsize" != "512" ]; then
				dots "Restoring Partition Tables";
				sgdisk -gel $tmpMBR $hd 2>&1 >/dev/null;
				gptcheck="yes";
			elif [ "$mbrsize" == "32256" -o "$has_GRUB" == "1" ] && [ "$osid" == "50" ]; then
				dots "Restoring MBR and GRUB";
				restoreGRUB "${hd}" "1" "${imagePath}";
				if [ -e "${imagePath}/d1.partitions" ]; then
					echo "Done";
					dots "Extended partitions";
					sfdisk $hd < ${imagePath}/d1.partitions &>/dev/null;
				else
					echo "Done";
					dots "No extended partitions";
				fi
			else
				dots "Restoring MBR";
				dd if=$tmpMBR of=$hd bs=512 count=1 &>/dev/null;
				if [ -e "${imagePath}/d1.partitions" ]; then
					echo "Done";
					dots "Extended partitions";
					sfdisk $hd < ${imagePath}/d1.partitions &>/dev/null;
				else
					echo "Done";
					dots "No extended partitions";
				fi
			fi
			runPartprobe $hd;
			echo "Done";
			debugPause;
			sleep 3;
		else
			handleError "Image Store Corrupt: Unable to locate MBR.";
		fi
	else
		handleError "Unable to locate image store.";
	fi
elif [ "$imgType" == "mpa" ]; then
	disks=`fogpartinfo --list-devices 2>/dev/null`;
	intDisk=1;
	if [ -d "$imagePath" ]; then
		for disk in $disks; do
			dots " Erasing current MBR/GPT Tables"
			sgdisk -Z $disk >/dev/null;
			runPartprobe;
			echo "Done";
			debugPause;
			tmpMBR="$imagePath/d${intDisk}.mbr";
			has_GRUB=`hasGRUB "${disk}" "${intDisk}" "${imagePath}"`;
			mbrsize=`ls -l $tmpMBR | awk '{print $5}'`;
			if [ -f $tmpMBR ]; then
				if [ "$mbrsize" != "32256" -a "$has_GRUB" != "1" ] && [ "$mbrsize" != "512" ]; then
					dots "Restoring Partition Tables";
					sgdisk -gel $tmpMBR $disk 2>&1 >/dev/null;
					gptcheck="yes";
				elif [ "$mbrsize" == "32256" -o "$has_GRUB" == "1" ] && [ "$intDisk" == "1" ] && [ "$osid" == "50" ]; then
					dots "Restoring MBR and GRUB";
					restoreGRUB "${disk}" "${intDisk}" "${imagePath}";
					if [ -e "${imagePath}/d${intDisk}.partitions" ]; then
						echo "Done";
						dots "Extended partitions";
						sfdisk $disk < ${imagePath}/d${intDisk}.partitions &>/dev/null;
					else
						echo "Done";
						dots "No extended partitions";
					fi
				else
					dots "Restoring MBR";
					dd if=$tmpMBR of=$disk bs=512 count=1 &>/dev/null;
					if [ -e "${imagePath}/d${intDisk}.partitions" ]; then
						echo "Done";
						dots "Extended partitions";
						sfdisk $disk < ${imagePath}/d${intDisk}.partitions &>/dev/null;
					else
						echo "Done"
						dots "No extended partitions";
					fi
				fi
				runPartprobe $disk;
				echo "Done";
				debugPause;
				sleep 3;
			else
				handleError "Image Store Corrupt: Unable to locate MBR.";
			fi
			intDisk=`expr $intDisk '+' 1`;
		done
	else
		handleError "Unable to locate image store.";
	fi
fi
# This performs all the Multicast Imaging Tasks.
if [ "$mc" == "yes" ]; then
	# we need an artificial pause to allow the server to spin up the upd-cast
	# process.
	sleep 10
	if [ "$imgType" == "n" ]; then
		if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
			if [ "$win7partcnt" == "1" ]; then
				writeImageMultiCast $win7sys;
				fixWin7boot $win7sys;
			elif [ "$win7partcnt" == "2" ]; then
				writeImageMultiCast $win7rec;
				fixWin7boot $win7rec;
				writeImageMultiCast $win7sys;
			elif [ "$win7partcnt" == "3" ]; then
				writeImageMultiCast ${hd}1;
				writeImageMultiCast ${hd}2;
				writeImageMultiCast $win7sys;
			fi
			expandPartition $win7sys;
		# Linux:
		#  save EBR so that the extended and logical partitions are not corrupted
		#  clone filesystem
		#  restore EBR so that the extended and logical partitions are not corrupted
		#  expand the partitions
		elif [ "$osid" == "50" ]; then
			parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
			diskLength=`expr length $hd`;
			for part in $parts; do
				saveEBR $part;
				partNum=${part:$diskLength};
				echo " * Processing Partition: $part ($partNum)";
				imgpart="$imagePath/d1p${partNum}.img*";
				sleep 2;
				if [ ! -f $imgpart ]; then
					echo " * Partition File Missing: $imgpart";
					makeSwapSystem "${imagePath}/d1.original.swapuuids" "$part";
				else
					writeImageMultiCast $part;
					restoreEBR $part;
					expandPartition $part;
				fi
			done
		else
			writeImageMultiCast $part;
			expandPartition $part;
		fi
	elif [ "$imgType" == "mps" ]; then
		parts=`getValidRestorePartitions $hd 1 $imagePath`;
		diskLength=`expr length $hd`;
		for part in $parts; do
			partNum=${part:$diskLength};
			echo " * Processing Partition: $part ($partNum)";
			writeImageMultiCast $part;
		done
		makeAllSwapSystems $hd 1 $imagePath;
	elif [ "$imgType" == "mpa" ]; then
		disks=`fogpartinfo --list-devices 2>/dev/null`;
		intDisk=1;
		for disk in $disks; do
			parts=`getValidRestorePartitions $disk $intDisk $imagePath`;
			diskLength=`expr length $disk`;
			for part in $parts; do
				partNum=${part:$diskLength};
				echo " * Processing Partition: $part ($partNum)";
				writeImageMultiCast $part;
			done
			makeAllSwapSystems $disk $intDisk $imagePath;
			intDisk=`expr $intDisk '+' 1`;
		done
	else
		writeImageMultiCast $hd;
	fi
else
	if [ "$imgType" == "n" ]; then
		dots "Checking Hard Disks";
		runPartprobe;
		echo "Done";
		debugPause;
		if [ "$osid" == "5" ] || [ "$osid" == "6" ] || [ "$osid" == "7" ]; then
			if [ "$win7partcnt" == "1" ]; then
				writeImage "$imagePath/sys.img.*" $win7sys;
				fixWin7boot $win7sys;
			elif [ "$win7partcnt" == "2" ]; then
				writeImage "$imagePath/rec.img.*" $win7rec;
				fixWin7boot $win7rec;
				writeImage "$imagePath/sys.img.*" $win7sys;
				part=$win7sys;
			elif [ "$win7partcnt" == "3" ]; then
				writeImage "$imagePath/rec1.img.*" ${hd}1;
				writeImage "$imagePath/rec3.img.*" ${hd}2;
				writeImage "$imagePath/sys.img.*" $win7sys;
			fi
			expandPartition $win7sys;
			debugPause;
		# Linux:
		#  save EBR so that the extended and logical partitions are not corrupted
		#  clone filesystem
		#  restore EBR so that the extended and logical partitions are not corrupted
		#  expand the partitions
		elif [ "$osid" == "50" ]; then
			parts=`fogpartinfo --list-parts $hd 2>/dev/null`;
			diskLength=`expr length $hd`;
			for part in $parts; do
				saveEBR $part;
				partNum=${part:$diskLength};
				echo " * Processing Partition: $part ($partNum)";
				imgpart="$imagePath/d1p${partNum}.img*";
				sleep 2;
				if [ ! -f $imgpart ]; then
					echo " * Partition File Missing: $imgpart";
					makeSwapSystem "${imagePath}/d1.original.swapuuids" "$part";
				else
					writeImage "$imgpart" $part;
					restoreEBR $part;
					expandPartition $part;
				fi
			done
		else
			writeImage $imagePath $part;
			expandPartition $part;
		fi
		debugPause;
	elif [ "$imgType" == "mps" ]; then
		dots "Checking Hard Disks";
		runPartprobe $hd &> /dev/null;
		echo "Done";
		parts=`getValidRestorePartitions $hd 1 $imagePath`;
		diskLength=`expr length $hd`;
		for part in $parts; do
			partNum=${part:$diskLength};
			echo " * Processing Partition: $part ($partNum)";
			imgpart="$imagePath/d1p${partNum}.img*";
			sleep 2;
			if [ ! -f $imgpart ]; then
				echo " * Partition File Missing: $imgpart";
			else
				writeImage "$imgpart" $part;
			fi
			resetFlag $part;
		done
		if [ "$osid" == "50" ]; then
			echo " * Restore Linux swap partitions:";
			makeAllSwapSystems $hd 1 $imagePath;
		fi
	elif [ "$imgType" == "mpa" ]; then
		disks=`fogpartinfo --list-devices 2>/dev/null`;
		intDisk=1;
		for disk in $disks; do
			dots "Checking Hard Disks";
			partprobe $disk &> /dev/null;
			echo "Done";
			parts=`getValidRestorePartitions $disk $intDisk $imagePath`;
			diskLength=`expr length $disk`;
			for part in $parts; do
				partNum=${part:$diskLength};
				echo " * Processing Partition: $part ($partNum)";
				imgpart="${imagePath}/d${intDisk}p${partNum}.img*";
				if [ ! -f $imgpart ]; then
					echo " * Partition File Missing: $imgpart";
				else
					writeImage "$imgpart" $part;
				fi
				resetFlag $part;
			done
			intDisk=`expr $intDisk '+' 1`;
		done
		if [ "$osid" == "50" ]; then
			echo " * Restore Linux swap partitions:";
			intDisk=1;
			for disk in $disks; do
				makeAllSwapSystems $disk $intDisk $imagePath;
				intDisk=`expr $intDisk '+' 1`;
			done
		fi
	else
		writeImage "$imagePath/$img" $hd;
	fi
	debugPause;
fi
if [ "$gptcheck" == "yes" ]; then
	sgdisk -G $hd;
fi
debugPause;
if [ -f "/images/postdownloadscripts/fog.postdownload" ]; then
	postdownpath="/images/postdownloadscripts/";
	. ${postdownpath}fog.postdownload;
fi
debugPause;
if [ "$capone" != "1" ]; then
	changeHostname;
	echo "";
	echo " * Updating Computer Database Status";
	echo "";
	cd /tmp;
	queueinfo="";
	wget -q -O /tmp/co.txt "http://${web}service/Post_Stage3.php?mac=$mac&type=$type" &>/dev/null;
	queueinfo=`cat co.txt`;
	while [ "$queueinfo" != '##' ]; do
		echo "		* $queueinfo";
		rm co.txt;
		wget -q -O /tmp/co.txt "http://${web}service/Post_Stage3.php?mac=$mac&type=$type" &>/dev/null;
		queueinfo=`cat co.txt`;
		sleep 5;
	done
	echo "";
	echo " * Database Updated!";
	echo "";
	debugPause;
fi
echo "";
echo " * Task is completed, computer will now restart.";
echo "";

