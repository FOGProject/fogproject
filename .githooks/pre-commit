#!/usr/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".
#
# Exit on error
set -e

project_dir=$(git rev-parse --show-toplevel)

updateLanguage() {
    command -v xgettext || return
    command -v msgcat || return
    command -v msgmerge || return
    xgettext --language=PHP --from-code=UTF-8 --output="$project_dir/packages/web/management/languages/messages.pot" --omit-header --no-location $(find $project_dir/packages/web/ -name "*.php")
    msgcat --sort-output -o "$project_dir/packages/web/management/languages/messages.pot" "$project_dir/packages/web/management/languages/messages.pot"
    for PO_FILE in $(find $project_dir/packages/web/management/languages/ -type f -name *.po); do
        msgmerge --update --backup=none $PO_FILE $project_dir/packages/web/management/languages/messages.pot 2>/dev/null >/dev/null
        msgcat --sort-output -o $PO_FILE $PO_FILE
    done
}

updateLanguage

# Get the current branch name
gitbranch=$(git branch --show-current)

# Get the latest tag commit
gitcom=$(git rev-list --tags --no-walk --max-count=1)

# Count commits from the last tag to HEAD
gitcount=$(git rev-list master..HEAD --count)

# Extract the first part of the branch name
branchon=$(echo ${gitbranch} | awk -F'-' '{print $1}')

# Extract the second part of the branch name
branchend=$(echo ${gitbranch} | awk -F'-' '{print $2}')

# Define the path to the system file
system_file="$(git rev-parse --show-toplevel)/packages/web/lib/fog/system.class.php"

current_version=$(grep "define('FOG_VERSION'" $system_file | sed "s/.*FOG_VERSION', '\([^']*\)');/\1/")

verbegin=""
channel=""

case $branchon in
    dev|stable)
        # Describe the tag and append the commit count correctly
        tagversion=$(git describe --tags ${gitcom})
        baseversion=${tagversion%.*}   # Retain everything before the last segment
        lastrevision=${tagversion##*.} # Extracts the last segment
        trunkversion="${baseversion}.${gitcount}"
        channel="Patches"
        ;;
    working)
        # Generate a version number based on the branchend and commit count for the working branch
        verbegin="${branchend}.0-beta"
        trunkversion="${verbegin}.${gitcount}"
        channel="Beta"
        ;;
    rc)
        channel="Release Candidate"
        version_prefix="${branchend}.0-RC"
        if [[ $current_version =~ $version_prefix-([0-9]+) ]]; then
            last_rc_version=${BASH_REMATCH[1]}
            next_rc_version=$((last_rc_version + 1))
        else
            trunkversion="${version_prefix}-1"
        fi
        ;;
    feature)
        verbegin="${branchend}.0-feature"
        trunkversion="${verbegin}.${gitcount}"
        channel="Feature"
        ;;
esac


# Update the version and channel in the system file
sed -i "s/define('FOG_VERSION',.*);/define('FOG_VERSION', '$trunkversion');/g" $system_file
sed -i "s/define('FOG_CHANNEL',.*);/define('FOG_CHANNEL', '$channel');/g" $system_file

# Add the modified system file to the staging area
git add $system_file
